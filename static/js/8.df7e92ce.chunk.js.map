{"version":3,"sources":["helpers/networkFee.ts","hooks/useNetworkFee.ts","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v4.js","hooks/useTxTracker.ts","views/Withdraw/Withdraw.style.ts","views/Withdraw/Withdraw.tsx","views/Withdraw/index.ts"],"names":["multiplier","average","fast","fastest","getGasRateByChain","inboundData","chain","chainInboundData","find","data","Number","gas_rate","getGasRateByFeeOption","feeOptionType","useNetworkFee","inputAsset","outputAsset","useApp","useMidgard","pools","inboundFee","useMemo","gasRate","NetworkFee","getNetworkFeeByAsset","asset","direction","outboundFee","totalFee","outboundFeeInSendAsset","AssetAmount","Amount","fromAssetAmount","totalPriceIn","price","decimal","eq","add","totalFeeInUSD","Asset","USD","getSumAmountInUSD","assetAmount1","assetAmount2","assetAmount1InUSD","assetAmount2InUSD","toCurrencyFormat","sum","raw","plus","toFixed","getRandomValues","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","validate","uuid","REGEX","test","byteToHex","i","push","toString","substr","stringify","arr","offset","arguments","length","undefined","toLowerCase","TypeError","v4","options","buf","rnds","random","useTxTracker","addNewTxTracker","updateTxTracker","clearTxTrackers","processSubmittedTx","submitTransaction","useCallback","type","submitTx","uuidv4","status","TxTrackerStatus","Submitting","action","refunded","pollTransaction","txTracker","Pending","setTxFailed","Failed","WithdrawHeader","styled","div","WithdrawHeaderRow","HeaderLabel","Label","attrs","color","weight","ToolContainer","SliderWrapper","ConfirmButtonContainer","palette","ConfirmModalContent","DetailContent","FancyButton","WithdrawPanel","poolMemberData","pool","shareTypes","useState","lpType","setLPType","wallet","useWallet","poolAsset","defaultLiquidityType","PoolShareType","RUNE_ASYM","LiquidityTypeOption","RUNE","ASSET_ASYM","ASSET","SYMMETRICAL","liquidityType","setLiquidityType","percent","setPercent","visibleConfirmModal","setVisibleConfirmModal","inboundAssetFee","inboundRuneFee","sendAsset","feeLabel","memberPoolData","runeAsym","assetAsym","SYM","sym","liquidityEntity","liquidityUnits","Liquidity","fromMidgard","runeAmount","assetAmount","getSymWithdrawAmount","Percent","AmountType","BASE_AMOUNT","getAsymRuneWithdrawAmount","amount","getAsymAssetWithdrawAmount","runePriceInUSD","Price","baseAsset","priceAmount","assetPriceInUSD","handleSetLPType","handleChangePercent","p","handleConfirmWithdraw","a","poolAssetString","trackId","outAssets","toSignificant","TxTrackerType","Withdraw","inAssets","multichain","withdraw","from","to","txID","withdrawChain","THORChain","console","log","Notification","message","description","duration","handleCancel","handleWithdrawLiquidity","renderConfirmModalContent","title","ticker","toUpperCase","tooltip","disabledOption","meta","selected","onSelect","disable","shareType","value","onChange","withLabel","TX_FEE_TOOLTIP_LABEL","onClick","visible","onOk","onCancel","inputAssets","WithdrawView","useParams","assetObj","setAssetObj","setPool","poolLoading","loadMemberDetailsByChain","chainMemberDetails","useEffect","assetPool","Pool","byAsset","assetEntity","fromAssetString","isRUNE","setDecimal","getAssetEntity","Object","keys","shares"],"mappings":"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","file":"static/js/8.df7e92ce.chunk.js","sourcesContent":["import { FeeOptionKey } from '@xchainjs/xchain-client'\nimport { Chain } from '@xchainjs/xchain-util'\nimport { InboundAddressesItem } from 'midgard-sdk'\n\nconst multiplier: Record<FeeOptionKey, number> = {\n  average: 0.67,\n  fast: 1,\n  fastest: 1.5,\n}\n\n// Reference issue: https://github.com/thorchain/asgardex-electron/issues/1381\nexport const getGasRateByChain = ({\n  inboundData,\n  chain,\n}: {\n  inboundData: InboundAddressesItem[]\n  chain: Chain\n}): number => {\n  const chainInboundData = inboundData.find((data) => data.chain === chain)\n\n  return Number(chainInboundData?.gas_rate ?? 0)\n}\n\nexport const getGasRateByFeeOption = ({\n  inboundData,\n  chain,\n  feeOptionType,\n}: {\n  inboundData: InboundAddressesItem[]\n  chain: Chain\n  feeOptionType: FeeOptionKey\n}) => {\n  return getGasRateByChain({ inboundData, chain }) * multiplier[feeOptionType]\n}\n","import { useMemo } from 'react'\n\nimport { Asset, Amount, AssetAmount, NetworkFee, Pool } from 'multichain-sdk'\n\nimport { useApp } from 'redux/app/hooks'\nimport { useMidgard } from 'redux/midgard/hooks'\n\nimport { getGasRateByChain, getGasRateByFeeOption } from 'helpers/networkFee'\n\nexport const useNetworkFee = ({\n  inputAsset,\n  outputAsset,\n}: {\n  inputAsset: Asset\n  outputAsset?: Asset\n}) => {\n  const { feeOptionType } = useApp()\n  const { inboundData, pools } = useMidgard()\n\n  const inboundFee = useMemo(() => {\n    // get inbound gasRate with fee option\n    const gasRate = getGasRateByFeeOption({\n      inboundData,\n      chain: inputAsset.chain,\n      feeOptionType,\n    })\n    const networkFee = NetworkFee.getNetworkFeeByAsset({\n      asset: inputAsset,\n      gasRate,\n      direction: 'inbound',\n    })\n\n    return networkFee\n  }, [inputAsset, inboundData, feeOptionType])\n\n  const outboundFee = useMemo(() => {\n    if (!outputAsset) return null\n\n    const gasRate = getGasRateByChain({ inboundData, chain: outputAsset.chain })\n    const networkFee = NetworkFee.getNetworkFeeByAsset({\n      asset: outputAsset,\n      gasRate,\n      direction: 'outbound',\n    })\n\n    return networkFee\n  }, [outputAsset, inboundData])\n\n  const totalFee = useMemo(() => {\n    if (!outboundFee) return inboundFee\n\n    const outboundFeeInSendAsset = new AssetAmount(\n      inputAsset,\n      Amount.fromAssetAmount(\n        outboundFee.totalPriceIn(inputAsset, pools).price,\n        inputAsset.decimal,\n      ),\n    )\n\n    if (inboundFee.asset.eq(inputAsset)) {\n      return inboundFee.add(outboundFeeInSendAsset)\n    }\n\n    const inboundFeeInSendAsset = new AssetAmount(\n      inputAsset,\n      Amount.fromAssetAmount(\n        inboundFee.totalPriceIn(inputAsset, pools).price,\n        inputAsset.decimal,\n      ),\n    )\n    return inboundFeeInSendAsset.add(outboundFeeInSendAsset)\n  }, [inputAsset, inboundFee, outboundFee, pools])\n\n  const totalFeeInUSD = useMemo(\n    () => totalFee.totalPriceIn(Asset.USD(), pools),\n    [totalFee, pools],\n  )\n\n  return {\n    totalFee,\n    inboundFee,\n    outboundFee,\n    totalFeeInUSD,\n  }\n}\n\nexport const getSumAmountInUSD = (\n  assetAmount1: AssetAmount | null,\n  assetAmount2: AssetAmount | null,\n  pools: Pool[],\n) => {\n  const assetAmount1InUSD = assetAmount1?.totalPriceIn(Asset.USD(), pools)\n  const assetAmount2InUSD = assetAmount2?.totalPriceIn(Asset.USD(), pools)\n\n  if (assetAmount1 === null && assetAmount2InUSD)\n    return assetAmount2InUSD.toCurrencyFormat()\n  if (assetAmount2 === null && assetAmount1InUSD)\n    return assetAmount1InUSD.toCurrencyFormat()\n\n  if (assetAmount1InUSD && assetAmount2InUSD) {\n    const sum = assetAmount1InUSD.raw().plus(assetAmount2InUSD.raw())\n\n    return Amount.fromAssetAmount(sum, 8).toFixed(2)\n  }\n\n  return Amount.fromAssetAmount(0, 8).toFixed()\n}\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","import { useCallback } from 'react'\n\nimport { v4 as uuidv4 } from 'uuid'\n\nimport { useMidgard } from 'redux/midgard/hooks'\nimport { TxTrackerStatus, SubmitTx, TxTrackerType } from 'redux/midgard/types'\n\n/**\n * 1. send transaction and get txHash\n * 2. poll midgard action API and get \"in\" tx with the same txHash\n * 3. check action status (success, pending)\n * 4. check action type and match with send tx type\n *    (if action type is not \"refund\", action type should be matched to the send type)\n */\n\nexport const useTxTracker = () => {\n  const {\n    addNewTxTracker,\n    updateTxTracker,\n    clearTxTrackers,\n    processSubmittedTx,\n  } = useMidgard()\n\n  // confirm and submit a transaction\n  const submitTransaction = useCallback(\n    ({\n      type,\n      submitTx,\n    }: {\n      type: TxTrackerType\n      submitTx: SubmitTx\n    }): string => {\n      const uuid = uuidv4()\n\n      addNewTxTracker({\n        uuid,\n        type,\n        status: TxTrackerStatus.Submitting,\n        submitTx,\n        action: null,\n        refunded: null,\n      })\n\n      return uuid\n    },\n    [addNewTxTracker],\n  )\n\n  // start polling a transaction\n  const pollTransaction = useCallback(\n    ({\n      uuid,\n      submitTx,\n      type,\n    }: {\n      uuid: string\n      submitTx: SubmitTx\n      type: TxTrackerType\n    }) => {\n      updateTxTracker({\n        uuid,\n        txTracker: {\n          status: TxTrackerStatus.Pending,\n          submitTx,\n        },\n      })\n      processSubmittedTx({ submitTx, type })\n    },\n    [updateTxTracker, processSubmittedTx],\n  )\n\n  // start polling a transaction\n  const setTxFailed = useCallback(\n    (uuid: string) => {\n      updateTxTracker({\n        uuid,\n        txTracker: {\n          status: TxTrackerStatus.Failed,\n        },\n      })\n    },\n    [updateTxTracker],\n  )\n\n  return {\n    submitTransaction,\n    pollTransaction,\n    clearTxTrackers,\n    setTxFailed,\n  }\n}\n","import { FancyButton, Label } from 'components'\nimport styled from 'styled-components/macro'\nimport { palette } from 'styled-theme'\n\nexport const WithdrawHeader = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nexport const WithdrawHeaderRow = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nexport const HeaderLabel = styled(Label).attrs({\n  color: 'primary',\n  weight: 'bold',\n})`\n  width: 80px;\n  margin-bottom: 8px;\n`\n\nexport const LPTypes = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nexport const ToolContainer = styled.div`\n  display: flex;\n\n  height: 60px;\n`\n\nexport const SliderWrapper = styled.div`\n  flex: 1;\n`\n\nexport const SwitchPair = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex: 1;\n\n  svg {\n    width: 24px;\n    height: 24px;\n    color: ${palette('primary', 0)};\n    transform: rotate(90deg);\n  }\n`\n\nexport const ConfirmButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  padding: 0 2%;\n\n  margin-top: 14px;\n\n  button {\n    flex: 1;\n  }\n`\n\nexport const ConfirmModalContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n`\n\nexport const DetailContent = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  width: 100%;\n  padding: 8px;\n  margin-top: 14px;\n\n  border: 1px solid ${palette('gray', 0)};\n`\n\nexport const ApproveBtn = styled(FancyButton)`\n  margin-right: 8px;\n`\n","import React, { useEffect, useMemo, useState, useCallback } from 'react'\n\nimport { useParams } from 'react-router'\n\nimport { THORChain } from '@xchainjs/xchain-thorchain'\nimport {\n  PanelView,\n  Slider,\n  ConfirmModal,\n  Information,\n  Notification,\n  FancyButton,\n  LiquidityTypeOption,\n  LiquidityType,\n  MemberPoolData,\n  Label,\n  PoolShareTypeSelect,\n  Panel,\n} from 'components'\nimport {\n  Amount,\n  Asset,\n  Pool,\n  Price,\n  Liquidity,\n  Percent,\n  AmountType,\n  SupportedChain,\n} from 'multichain-sdk'\n\nimport { useMidgard } from 'redux/midgard/hooks'\nimport {\n  PoolMemberData,\n  PoolShareType,\n  TxTrackerType,\n} from 'redux/midgard/types'\nimport { useWallet } from 'redux/wallet/hooks'\n\nimport { useNetworkFee } from 'hooks/useNetworkFee'\nimport { useTxTracker } from 'hooks/useTxTracker'\n\nimport { multichain } from 'services/multichain'\n\nimport { TX_FEE_TOOLTIP_LABEL } from 'settings/constants/label'\n\nimport * as Styled from './Withdraw.style'\n\nconst WithdrawView = () => {\n  const { asset } = useParams<{ asset: string }>()\n  const [assetObj, setAssetObj] = useState<Asset>()\n  const [pool, setPool] = useState<Pool>()\n\n  const {\n    pools,\n    poolLoading,\n    loadMemberDetailsByChain,\n    chainMemberDetails,\n  } = useMidgard()\n\n  useEffect(() => {\n    if (!pool) return\n    loadMemberDetailsByChain(pool.asset.chain as SupportedChain)\n  }, [loadMemberDetailsByChain, pool])\n\n  const poolMemberData: PoolMemberData | null = useMemo(() => {\n    if (!pool) return null\n    return (\n      chainMemberDetails?.[pool.asset.chain]?.[pool.asset.toString()] ?? null\n    )\n  }, [chainMemberDetails, pool])\n\n  useEffect(() => {\n    if (!poolLoading && pools.length && assetObj) {\n      const assetPool = Pool.byAsset(assetObj, pools)\n\n      if (assetPool) {\n        setPool(assetPool)\n      }\n    }\n  }, [pools, poolLoading, assetObj])\n\n  useEffect(() => {\n    const getAssetEntity = async () => {\n      if (!asset) {\n        return\n      }\n      const assetEntity = Asset.fromAssetString(asset)\n\n      if (assetEntity) {\n        if (assetEntity.isRUNE()) return\n\n        await assetEntity.setDecimal()\n\n        setAssetObj(assetEntity)\n      }\n    }\n\n    getAssetEntity()\n  }, [asset])\n\n  if (\n    pool &&\n    pools.length &&\n    poolMemberData &&\n    Object.keys(poolMemberData).length\n  ) {\n    const shares = []\n    if (poolMemberData.sym) shares.push(PoolShareType.SYM)\n    if (poolMemberData.runeAsym) shares.push(PoolShareType.RUNE_ASYM)\n    if (poolMemberData.assetAsym) shares.push(PoolShareType.ASSET_ASYM)\n\n    return (\n      <WithdrawPanel\n        pool={pool}\n        shareTypes={shares}\n        pools={pools}\n        poolMemberData={poolMemberData}\n      />\n    )\n  }\n\n  return (\n    <Panel>\n      <Label>You don't have LP to withdraw</Label>\n    </Panel>\n  )\n}\n\nconst WithdrawPanel = ({\n  poolMemberData,\n  pool,\n  pools,\n  shareTypes,\n}: {\n  poolMemberData: PoolMemberData\n  shareTypes: PoolShareType[]\n  pool: Pool\n  pools: Pool[]\n}) => {\n  const [lpType, setLPType] = useState(shareTypes[0])\n\n  const { wallet } = useWallet()\n  const { submitTransaction, pollTransaction, setTxFailed } = useTxTracker()\n\n  const poolAsset = useMemo(() => pool.asset, [pool])\n\n  const defaultLiquidityType = useMemo(() => {\n    if (lpType === PoolShareType.RUNE_ASYM) {\n      return LiquidityTypeOption.RUNE\n    }\n    if (lpType === PoolShareType.ASSET_ASYM) {\n      return LiquidityTypeOption.ASSET\n    }\n    return LiquidityTypeOption.SYMMETRICAL\n  }, [lpType])\n  const [liquidityType, setLiquidityType] = useState(defaultLiquidityType)\n\n  const [percent, setPercent] = useState(0)\n  const [visibleConfirmModal, setVisibleConfirmModal] = useState(false)\n\n  const { inboundFee: inboundAssetFee } = useNetworkFee({\n    inputAsset: poolAsset,\n  })\n\n  const { inboundFee: inboundRuneFee } = useNetworkFee({\n    inputAsset: Asset.RUNE(),\n  })\n\n  const sendAsset = useMemo(() => {\n    if (liquidityType === LiquidityTypeOption.ASSET) {\n      return poolAsset\n    }\n\n    return Asset.RUNE()\n  }, [liquidityType, poolAsset])\n\n  const feeLabel = useMemo(() => {\n    if (liquidityType === LiquidityTypeOption.ASSET) {\n      return `${inboundAssetFee.toCurrencyFormat()} (${inboundAssetFee\n        .totalPriceIn(Asset.USD(), pools)\n        .toCurrencyFormat(2)})`\n    }\n\n    return `${inboundRuneFee.toCurrencyFormat()} (${inboundRuneFee\n      .totalPriceIn(Asset.USD(), pools)\n      .toCurrencyFormat(2)})`\n  }, [inboundAssetFee, inboundRuneFee, pools, liquidityType])\n\n  const memberPoolData = useMemo(() => {\n    if (lpType === PoolShareType.RUNE_ASYM) return poolMemberData.runeAsym\n    if (lpType === PoolShareType.ASSET_ASYM) return poolMemberData.assetAsym\n    if (lpType === PoolShareType.SYM) return poolMemberData.sym\n\n    return null\n  }, [poolMemberData, lpType])\n\n  const liquidityEntity = useMemo(() => {\n    if (!memberPoolData) return null\n    const { liquidityUnits } = memberPoolData\n\n    return new Liquidity(pool, Amount.fromMidgard(liquidityUnits))\n  }, [pool, memberPoolData])\n\n  const { runeAmount, assetAmount } = useMemo(() => {\n    if (!liquidityEntity) {\n      return {\n        runeAmount: Amount.fromMidgard(0),\n        assetAmount: Amount.fromMidgard(0),\n      }\n    }\n\n    if (liquidityType === LiquidityTypeOption.SYMMETRICAL) {\n      return liquidityEntity.getSymWithdrawAmount(\n        new Percent(percent, AmountType.BASE_AMOUNT),\n      )\n    }\n\n    if (liquidityType === LiquidityTypeOption.RUNE) {\n      const amount = liquidityEntity.getAsymRuneWithdrawAmount(\n        new Percent(percent, AmountType.BASE_AMOUNT),\n      )\n\n      return {\n        runeAmount: amount,\n        assetAmount: Amount.fromMidgard(0),\n      }\n    }\n\n    const amount = liquidityEntity.getAsymAssetWithdrawAmount(\n      new Percent(percent, AmountType.BASE_AMOUNT),\n    )\n\n    return {\n      runeAmount: Amount.fromMidgard(0),\n      assetAmount: amount,\n    }\n  }, [liquidityType, percent, liquidityEntity])\n\n  const runePriceInUSD = useMemo(\n    () =>\n      new Price({\n        baseAsset: Asset.RUNE(),\n        pools,\n        priceAmount: runeAmount,\n      }),\n    [runeAmount, pools],\n  )\n\n  const assetPriceInUSD = useMemo(\n    () =>\n      new Price({\n        baseAsset: pool.asset,\n        pools,\n        priceAmount: assetAmount,\n      }),\n    [pool, assetAmount, pools],\n  )\n\n  const handleSetLPType = useCallback((type: PoolShareType) => {\n    setLPType(type)\n    if (type === PoolShareType.RUNE_ASYM) {\n      setLiquidityType(LiquidityTypeOption.RUNE)\n    } else if (type === PoolShareType.ASSET_ASYM) {\n      setLiquidityType(LiquidityTypeOption.ASSET)\n    } else {\n      setLiquidityType(LiquidityTypeOption.SYMMETRICAL)\n    }\n  }, [])\n\n  const handleChangePercent = useCallback((p: number) => {\n    setPercent(p)\n  }, [])\n\n  const handleConfirmWithdraw = useCallback(async () => {\n    setVisibleConfirmModal(false)\n    if (wallet) {\n      const poolAssetString = pool.asset.toString()\n      let trackId = ''\n      try {\n        if (lpType === PoolShareType.SYM) {\n          if (liquidityType === LiquidityTypeOption.SYMMETRICAL) {\n            const outAssets = [\n              {\n                asset: Asset.RUNE().toString(),\n                amount: runeAmount.toSignificant(6),\n              },\n              {\n                asset: pool.asset.toString(),\n                amount: assetAmount.toSignificant(6),\n              },\n            ]\n\n            // register to tx tracker\n            trackId = submitTransaction({\n              type: TxTrackerType.Withdraw,\n              submitTx: {\n                inAssets: [],\n                outAssets,\n                poolAsset: poolAssetString,\n              },\n            })\n\n            const txID = await multichain.withdraw({\n              pool,\n              percent: new Percent(percent),\n              from: 'sym',\n              to: 'sym',\n            })\n\n            // start polling\n            pollTransaction({\n              type: TxTrackerType.Withdraw,\n              uuid: trackId,\n              submitTx: {\n                inAssets: [],\n                outAssets,\n                poolAsset: poolAssetString,\n                txID,\n                withdrawChain: THORChain,\n              },\n            })\n          } else if (liquidityType === LiquidityTypeOption.RUNE) {\n            const outAssets = [\n              {\n                asset: Asset.RUNE().toString(),\n                amount: runeAmount.toSignificant(6),\n              },\n            ]\n\n            // register to tx tracker\n            trackId = submitTransaction({\n              type: TxTrackerType.Withdraw,\n              submitTx: {\n                inAssets: [],\n                outAssets,\n                poolAsset: poolAssetString,\n              },\n            })\n\n            const txID = await multichain.withdraw({\n              pool,\n              percent: new Percent(percent),\n              from: 'sym',\n              to: 'rune',\n            })\n\n            // start polling\n            pollTransaction({\n              type: TxTrackerType.Withdraw,\n              uuid: trackId,\n              submitTx: {\n                inAssets: [],\n                outAssets,\n                txID,\n                poolAsset: poolAssetString,\n                withdrawChain: THORChain,\n              },\n            })\n          } else if (liquidityType === LiquidityTypeOption.ASSET) {\n            const outAssets = [\n              {\n                asset: pool.asset.toString(),\n                amount: assetAmount.toSignificant(6),\n              },\n            ]\n\n            // register to tx tracker\n            trackId = submitTransaction({\n              type: TxTrackerType.Withdraw,\n              submitTx: {\n                inAssets: [],\n                outAssets,\n                poolAsset: poolAssetString,\n              },\n            })\n\n            const txID = await multichain.withdraw({\n              pool,\n              percent: new Percent(percent),\n              from: 'sym',\n              to: 'asset',\n            })\n\n            // start polling\n            pollTransaction({\n              type: TxTrackerType.Withdraw,\n              uuid: trackId,\n              submitTx: {\n                inAssets: [],\n                outAssets,\n                txID,\n                poolAsset: poolAssetString,\n                withdrawChain: THORChain,\n              },\n            })\n          }\n        } else if (lpType === PoolShareType.ASSET_ASYM) {\n          const outAssets = [\n            {\n              asset: pool.asset.toString(),\n              amount: assetAmount.toSignificant(6),\n            },\n          ]\n\n          // register to tx tracker\n          trackId = submitTransaction({\n            type: TxTrackerType.Withdraw,\n            submitTx: {\n              inAssets: [],\n              outAssets,\n              poolAsset: poolAssetString,\n            },\n          })\n\n          const txID = await multichain.withdraw({\n            pool,\n            percent: new Percent(percent),\n            from: 'asset',\n            to: 'asset',\n          })\n\n          // start polling\n          pollTransaction({\n            type: TxTrackerType.Withdraw,\n            uuid: trackId,\n            submitTx: {\n              inAssets: [],\n              outAssets,\n              txID,\n              poolAsset: poolAssetString,\n              withdrawChain: pool.asset.chain,\n            },\n          })\n        } else if (lpType === PoolShareType.RUNE_ASYM) {\n          const outAssets = [\n            {\n              asset: Asset.RUNE().toString(),\n              amount: runeAmount.toSignificant(6),\n            },\n          ]\n\n          // register to tx tracker\n          trackId = submitTransaction({\n            type: TxTrackerType.Withdraw,\n            submitTx: {\n              inAssets: [],\n              outAssets,\n              poolAsset: poolAssetString,\n            },\n          })\n\n          const txID = await multichain.withdraw({\n            pool,\n            percent: new Percent(percent),\n            from: 'rune',\n            to: 'rune',\n          })\n\n          // start polling\n          pollTransaction({\n            type: TxTrackerType.Withdraw,\n            uuid: trackId,\n            submitTx: {\n              inAssets: [],\n              outAssets,\n              txID,\n              poolAsset: poolAssetString,\n              withdrawChain: THORChain,\n            },\n          })\n        }\n      } catch (error) {\n        console.log(error)\n        setTxFailed(trackId)\n\n        Notification({\n          type: 'error',\n          message: 'Submit Transaction Failed.',\n          description: error?.toString(),\n          duration: 20,\n        })\n      }\n    }\n  }, [\n    liquidityType,\n    lpType,\n    wallet,\n    pool,\n    percent,\n    runeAmount,\n    assetAmount,\n    submitTransaction,\n    pollTransaction,\n    setTxFailed,\n  ])\n\n  const handleCancel = useCallback(() => {\n    setVisibleConfirmModal(false)\n  }, [])\n\n  const handleWithdrawLiquidity = useCallback(() => {\n    if (wallet) {\n      setVisibleConfirmModal(true)\n    } else {\n      Notification({\n        type: 'info',\n        message: 'Wallet Not Found',\n        description: 'Please connect wallet',\n      })\n    }\n  }, [wallet])\n\n  const renderConfirmModalContent = useMemo(() => {\n    return (\n      <Styled.ConfirmModalContent>\n        {lpType === PoolShareType.SYM && (\n          <Information\n            title=\"Withdraw\"\n            description={`${assetAmount.toSignificant(\n              6,\n            )} ${poolAsset.ticker.toUpperCase()}, ${runeAmount.toSignificant(\n              6,\n            )} RUNE`}\n          />\n        )}\n        {lpType === PoolShareType.ASSET_ASYM && (\n          <Information\n            title=\"Withdraw\"\n            description={`${assetAmount.toSignificant(\n              6,\n            )} ${poolAsset.ticker.toUpperCase()}`}\n          />\n        )}\n        {lpType === PoolShareType.RUNE_ASYM && (\n          <Information\n            title=\"Withdraw\"\n            description={`${runeAmount.toSignificant(6)} RUNE`}\n          />\n        )}\n        <Information\n          title=\"Transaction Fee\"\n          description={feeLabel}\n          tooltip=\"Gas fee used for submitting the transaction using the thorchain protocol\"\n        />\n      </Styled.ConfirmModalContent>\n    )\n  }, [assetAmount, runeAmount, poolAsset, lpType, feeLabel])\n\n  const title = useMemo(() => `Withdraw ${poolAsset.ticker} Liquidity`, [\n    poolAsset,\n  ])\n\n  const disabledOption = useMemo(() => {\n    if (lpType === PoolShareType.RUNE_ASYM)\n      return [LiquidityTypeOption.SYMMETRICAL, LiquidityTypeOption.ASSET]\n    if (lpType === PoolShareType.ASSET_ASYM)\n      return [LiquidityTypeOption.SYMMETRICAL, LiquidityTypeOption.RUNE]\n    return []\n  }, [lpType])\n\n  if (!wallet) {\n    return (\n      <PanelView meta={title} poolAsset={poolAsset} type=\"withdraw\">\n        <Label>Please connect wallet.</Label>\n      </PanelView>\n    )\n  }\n\n  if (!memberPoolData) {\n    return (\n      <PanelView meta={title} poolAsset={poolAsset} type=\"withdraw\">\n        <Label>You don't have any {poolAsset.ticker} liquidity.</Label>\n      </PanelView>\n    )\n  }\n\n  return (\n    <PanelView meta={title} poolAsset={poolAsset} type=\"withdraw\">\n      <Styled.WithdrawHeader>\n        <Styled.WithdrawHeaderRow>\n          <Styled.HeaderLabel>WITHDRAW: </Styled.HeaderLabel>\n          <LiquidityType\n            poolAsset={poolAsset}\n            selected={liquidityType}\n            onSelect={setLiquidityType}\n            disable={disabledOption}\n          />\n        </Styled.WithdrawHeaderRow>\n        <Styled.WithdrawHeaderRow>\n          <Styled.HeaderLabel>FROM: </Styled.HeaderLabel>\n          <PoolShareTypeSelect\n            poolAsset={poolAsset}\n            selected={lpType}\n            onSelect={handleSetLPType}\n            shareTypes={shareTypes}\n          />\n        </Styled.WithdrawHeaderRow>\n      </Styled.WithdrawHeader>\n      <MemberPoolData data={memberPoolData} shareType={lpType} pool={pool} />\n      <Styled.ToolContainer>\n        <Styled.SliderWrapper>\n          <Slider value={percent} onChange={handleChangePercent} withLabel />\n        </Styled.SliderWrapper>\n      </Styled.ToolContainer>\n\n      <Styled.DetailContent>\n        {liquidityType !== LiquidityTypeOption.ASSET && (\n          <Information\n            title=\"RUNE\"\n            description={`${runeAmount.toSignificant(\n              6,\n            )} RUNE (${runePriceInUSD.toCurrencyFormat(2)})`}\n            tooltip=\"You are withdrawing RUNE from the liquidity\"\n          />\n        )}\n        {liquidityType !== LiquidityTypeOption.RUNE && (\n          <Information\n            title={poolAsset.ticker}\n            description={`${assetAmount.toSignificant(6)} ${\n              poolAsset.ticker\n            } (${assetPriceInUSD.toCurrencyFormat(2)})`}\n            tooltip=\"You are withdrawing ASSET from the liquidity\"\n          />\n        )}\n        <Information\n          title=\"Transaction Fee\"\n          description={feeLabel}\n          tooltip={TX_FEE_TOOLTIP_LABEL}\n        />\n      </Styled.DetailContent>\n      {wallet && (\n        <Styled.ConfirmButtonContainer>\n          <FancyButton onClick={handleWithdrawLiquidity}>Withdraw</FancyButton>\n        </Styled.ConfirmButtonContainer>\n      )}\n      <ConfirmModal\n        visible={visibleConfirmModal}\n        onOk={handleConfirmWithdraw}\n        onCancel={handleCancel}\n        inputAssets={[sendAsset]}\n      >\n        {renderConfirmModalContent}\n      </ConfirmModal>\n    </PanelView>\n  )\n}\n\nexport default WithdrawView\n","import Withdraw from './Withdraw'\n\nexport default Withdraw\n"],"sourceRoot":""}