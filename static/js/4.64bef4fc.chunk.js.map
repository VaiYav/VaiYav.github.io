{"version":3,"sources":["helpers/networkFee.ts","hooks/useNetworkFee.ts","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v4.js","hooks/useTxTracker.ts","hooks/useBalance.ts","views/PendingDeposit/Add/Add.style.ts","views/PendingDeposit/Add/Add.tsx","views/PendingDeposit/Add/utils.ts","views/PendingDeposit/PendingDeposit.style.ts","views/PendingDeposit/PendingDeposit.tsx","hooks/usePendingLP.ts","views/PendingDeposit/index.ts"],"names":["multiplier","average","fast","fastest","getGasRateByChain","inboundData","chain","chainInboundData","find","data","Number","gas_rate","getGasRateByFeeOption","feeOptionType","useNetworkFee","inputAsset","outputAsset","useApp","useMidgard","pools","inboundFee","useMemo","gasRate","NetworkFee","getNetworkFeeByAsset","asset","direction","outboundFee","totalFee","outboundFeeInSendAsset","AssetAmount","Amount","fromAssetAmount","totalPriceIn","price","decimal","eq","add","totalFeeInUSD","Asset","USD","getSumAmountInUSD","assetAmount1","assetAmount2","assetAmount1InUSD","assetAmount2InUSD","toCurrencyFormat","sum","raw","plus","toFixed","getRandomValues","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","validate","uuid","REGEX","test","byteToHex","i","push","toString","substr","stringify","arr","offset","arguments","length","undefined","toLowerCase","TypeError","v4","options","buf","rnds","random","useTxTracker","addNewTxTracker","updateTxTracker","clearTxTrackers","processSubmittedTx","submitTransaction","useCallback","type","submitTx","uuidv4","status","TxTrackerStatus","Submitting","action","refunded","pollTransaction","txTracker","Pending","setTxFailed","Failed","useBalance","dispatch","useDispatch","useSelector","state","app","wallet","midgard","reloadBalanceByChain","walletActions","reloadAllBalance","getMaxBalance","balance","getAssetBalance","amount","maxSpendableAmount","isGasAsset","sub","mul","gt","ToolContainer","styled","div","ContentPanel","media","sm","SliderWrapper","SwitchPair","palette","ConfirmButtonContainer","ConfirmModalContent","DetailContent","FancyButton","AddLiquidityPanel","pool","poolAsset","assetObj","isFundsCapReached","useMimir","inboundAssetFee","inboundRuneFee","RUNE","isAssetPending","pending_asset","pendingAmount","fromMidgard","pending_rune","useState","assetAmount","setAssetAmount","runeAmount","setRuneAmount","percent","setPercent","visibleConfirmModal","setVisibleConfirmModal","feeLabel","liquidityUnits","units","liquidityEntity","Liquidity","addLiquiditySlip","getLiquiditySlip","poolShareEst","getPoolShareEst","poolAssetPriceInUSD","Price","baseAsset","priceAmount","runeAssetPriceInUSD","poolAssetBalance","maxPoolAssetBalance","runeBalance","symAssetAmount","runePriceInAsset","maxSymAssetAmount","maxSymRuneAmount","assetPriceInRune","getMaxSymAmounts","handleChangePercent","p","handleChangePendingAmount","maxAmount","toNumber","handleConfirmAdd","a","runeAssetAmount","inAssets","toSignificant","trackId","TxTrackerType","AddLiquidity","outAssets","ticker","multichain","addLiquidity","txRes","runeTxHash","runeTx","assetTxHash","assetTx","txID","addTx","runeTxID","assetTxID","Notification","message","duration","console","log","poolAssetAmount","handleCancel","handleAddLiquidity","description","renderConfirmModalContent","title","estimatedTime","getEstimatedTxTime","THORChain","tooltip","SLIP_TOOLTIP_LABEL","ESTIMATED_POOL_SHARE_LABEL","TX_FEE_TOOLTIP_LABEL","ESTIMATED_TIME_LABEL","minRuneAmount","getMinAmountByChain","minAssetAmount","isValidDeposit","valid","msg","usdPrice","inputProps","disabled","selectDisabled","value","onChange","withLabel","PlusOutlined","onClick","error","visible","onOk","onCancel","inputAssets","PendingDepositView","useWallet","option","setOption","pendingLP","pendingLPLoading","getPendingDeposit","thorAddress","getWalletAddressByChain","forEach","getLiquidityProviderData","address","useEffect","hasPendingDeposit","Object","keys","usePendingLP","fromAssetString","Pool","byAsset","handleComplete","handleWithdrawLiquidity","handleWithdraw","renderPendingDeposit","size","loading","map","poolIndex","poolAssetObj","PendingDepositCard","onComplete","onWithdraw","renderDeposit","pendingAsset","handleConfirmWithdraw","poolAssetString","Withdraw","withdraw","Percent","from","to","withdrawChain","renderWithdrawConfirmModalContent","toUpperCase","meta","BTC","PendingDeposit"],"mappings":"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","file":"static/js/4.64bef4fc.chunk.js","sourcesContent":["import { FeeOptionKey } from '@xchainjs/xchain-client'\nimport { Chain } from '@xchainjs/xchain-util'\nimport { InboundAddressesItem } from 'midgard-sdk'\n\nconst multiplier: Record<FeeOptionKey, number> = {\n  average: 0.67,\n  fast: 1,\n  fastest: 1.5,\n}\n\n// Reference issue: https://github.com/thorchain/asgardex-electron/issues/1381\nexport const getGasRateByChain = ({\n  inboundData,\n  chain,\n}: {\n  inboundData: InboundAddressesItem[]\n  chain: Chain\n}): number => {\n  const chainInboundData = inboundData.find((data) => data.chain === chain)\n\n  return Number(chainInboundData?.gas_rate ?? 0)\n}\n\nexport const getGasRateByFeeOption = ({\n  inboundData,\n  chain,\n  feeOptionType,\n}: {\n  inboundData: InboundAddressesItem[]\n  chain: Chain\n  feeOptionType: FeeOptionKey\n}) => {\n  return getGasRateByChain({ inboundData, chain }) * multiplier[feeOptionType]\n}\n","import { useMemo } from 'react'\n\nimport { Asset, Amount, AssetAmount, NetworkFee, Pool } from 'multichain-sdk'\n\nimport { useApp } from 'redux/app/hooks'\nimport { useMidgard } from 'redux/midgard/hooks'\n\nimport { getGasRateByChain, getGasRateByFeeOption } from 'helpers/networkFee'\n\nexport const useNetworkFee = ({\n  inputAsset,\n  outputAsset,\n}: {\n  inputAsset: Asset\n  outputAsset?: Asset\n}) => {\n  const { feeOptionType } = useApp()\n  const { inboundData, pools } = useMidgard()\n\n  const inboundFee = useMemo(() => {\n    // get inbound gasRate with fee option\n    const gasRate = getGasRateByFeeOption({\n      inboundData,\n      chain: inputAsset.chain,\n      feeOptionType,\n    })\n    const networkFee = NetworkFee.getNetworkFeeByAsset({\n      asset: inputAsset,\n      gasRate,\n      direction: 'inbound',\n    })\n\n    return networkFee\n  }, [inputAsset, inboundData, feeOptionType])\n\n  const outboundFee = useMemo(() => {\n    if (!outputAsset) return null\n\n    const gasRate = getGasRateByChain({ inboundData, chain: outputAsset.chain })\n    const networkFee = NetworkFee.getNetworkFeeByAsset({\n      asset: outputAsset,\n      gasRate,\n      direction: 'outbound',\n    })\n\n    return networkFee\n  }, [outputAsset, inboundData])\n\n  const totalFee = useMemo(() => {\n    if (!outboundFee) return inboundFee\n\n    const outboundFeeInSendAsset = new AssetAmount(\n      inputAsset,\n      Amount.fromAssetAmount(\n        outboundFee.totalPriceIn(inputAsset, pools).price,\n        inputAsset.decimal,\n      ),\n    )\n\n    if (inboundFee.asset.eq(inputAsset)) {\n      return inboundFee.add(outboundFeeInSendAsset)\n    }\n\n    const inboundFeeInSendAsset = new AssetAmount(\n      inputAsset,\n      Amount.fromAssetAmount(\n        inboundFee.totalPriceIn(inputAsset, pools).price,\n        inputAsset.decimal,\n      ),\n    )\n    return inboundFeeInSendAsset.add(outboundFeeInSendAsset)\n  }, [inputAsset, inboundFee, outboundFee, pools])\n\n  const totalFeeInUSD = useMemo(\n    () => totalFee.totalPriceIn(Asset.USD(), pools),\n    [totalFee, pools],\n  )\n\n  return {\n    totalFee,\n    inboundFee,\n    outboundFee,\n    totalFeeInUSD,\n  }\n}\n\nexport const getSumAmountInUSD = (\n  assetAmount1: AssetAmount | null,\n  assetAmount2: AssetAmount | null,\n  pools: Pool[],\n) => {\n  const assetAmount1InUSD = assetAmount1?.totalPriceIn(Asset.USD(), pools)\n  const assetAmount2InUSD = assetAmount2?.totalPriceIn(Asset.USD(), pools)\n\n  if (assetAmount1 === null && assetAmount2InUSD)\n    return assetAmount2InUSD.toCurrencyFormat()\n  if (assetAmount2 === null && assetAmount1InUSD)\n    return assetAmount1InUSD.toCurrencyFormat()\n\n  if (assetAmount1InUSD && assetAmount2InUSD) {\n    const sum = assetAmount1InUSD.raw().plus(assetAmount2InUSD.raw())\n\n    return Amount.fromAssetAmount(sum, 8).toFixed(2)\n  }\n\n  return Amount.fromAssetAmount(0, 8).toFixed()\n}\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","import { useCallback } from 'react'\n\nimport { v4 as uuidv4 } from 'uuid'\n\nimport { useMidgard } from 'redux/midgard/hooks'\nimport { TxTrackerStatus, SubmitTx, TxTrackerType } from 'redux/midgard/types'\n\n/**\n * 1. send transaction and get txHash\n * 2. poll midgard action API and get \"in\" tx with the same txHash\n * 3. check action status (success, pending)\n * 4. check action type and match with send tx type\n *    (if action type is not \"refund\", action type should be matched to the send type)\n */\n\nexport const useTxTracker = () => {\n  const {\n    addNewTxTracker,\n    updateTxTracker,\n    clearTxTrackers,\n    processSubmittedTx,\n  } = useMidgard()\n\n  // confirm and submit a transaction\n  const submitTransaction = useCallback(\n    ({\n      type,\n      submitTx,\n    }: {\n      type: TxTrackerType\n      submitTx: SubmitTx\n    }): string => {\n      const uuid = uuidv4()\n\n      addNewTxTracker({\n        uuid,\n        type,\n        status: TxTrackerStatus.Submitting,\n        submitTx,\n        action: null,\n        refunded: null,\n      })\n\n      return uuid\n    },\n    [addNewTxTracker],\n  )\n\n  // start polling a transaction\n  const pollTransaction = useCallback(\n    ({\n      uuid,\n      submitTx,\n      type,\n    }: {\n      uuid: string\n      submitTx: SubmitTx\n      type: TxTrackerType\n    }) => {\n      updateTxTracker({\n        uuid,\n        txTracker: {\n          status: TxTrackerStatus.Pending,\n          submitTx,\n        },\n      })\n      processSubmittedTx({ submitTx, type })\n    },\n    [updateTxTracker, processSubmittedTx],\n  )\n\n  // start polling a transaction\n  const setTxFailed = useCallback(\n    (uuid: string) => {\n      updateTxTracker({\n        uuid,\n        txTracker: {\n          status: TxTrackerStatus.Failed,\n        },\n      })\n    },\n    [updateTxTracker],\n  )\n\n  return {\n    submitTransaction,\n    pollTransaction,\n    clearTxTrackers,\n    setTxFailed,\n  }\n}\n","import { useCallback } from 'react'\n\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { Asset, Amount, getAssetBalance, NetworkFee } from 'multichain-sdk'\n\nimport { SupportedChain } from 'multichain-sdk/clients/types'\n\nimport { RootState } from 'redux/store'\nimport * as walletActions from 'redux/wallet/actions'\n\nimport { getGasRateByFeeOption } from 'helpers/networkFee'\n\nexport const useBalance = () => {\n  const dispatch = useDispatch()\n  const { feeOptionType } = useSelector((state: RootState) => state.app)\n  const { wallet } = useSelector((state: RootState) => state.wallet)\n  const { inboundData } = useSelector((state: RootState) => state.midgard)\n\n  const reloadBalanceByChain = useCallback(\n    (chain: SupportedChain) => {\n      dispatch(walletActions.getWalletByChain(chain))\n    },\n    [dispatch],\n  )\n\n  const reloadAllBalance = useCallback(() => {\n    dispatch(walletActions.loadAllWallets())\n  }, [dispatch])\n\n  const getMaxBalance = useCallback(\n    (asset: Asset): Amount => {\n      if (!wallet?.[asset.chain as SupportedChain]) {\n        // allow max amount for emulation if wallet is not connected\n        return Amount.fromAssetAmount(10 ** 8, 8)\n      }\n\n      // calculate inbound fee\n      const gasRate = getGasRateByFeeOption({\n        inboundData,\n        chain: asset.chain,\n        feeOptionType,\n      })\n      const inboundFee = NetworkFee.getNetworkFeeByAsset({\n        asset,\n        gasRate,\n        direction: 'inbound',\n      })\n\n      const balance = getAssetBalance(asset, wallet).amount\n\n      /**\n       * if asset is used for gas, subtract the inbound gas fee from input amount\n       * else allow full amount\n       * Calc: max spendable amount = balance amount - 2 x gas fee(if send asset equals to gas asset)\n       */\n\n      const maxSpendableAmount = asset.isGasAsset()\n        ? balance.sub(inboundFee.mul(1.5).amount)\n        : balance\n\n      if (maxSpendableAmount.gt(0)) {\n        return maxSpendableAmount\n      }\n\n      return Amount.fromAssetAmount(0, asset.decimal)\n    },\n    [wallet, feeOptionType, inboundData],\n  )\n\n  return {\n    getMaxBalance,\n    reloadAllBalance,\n    reloadBalanceByChain,\n    wallet,\n  }\n}\n","import { FancyButton } from 'components'\nimport styled from 'styled-components/macro'\nimport { palette } from 'styled-theme'\n\nimport { media } from 'helpers/style'\n\nexport const ToolContainer = styled.div`\n  display: flex;\n\n  height: 60px;\n`\n\nexport const ContentPanel = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n\n  padding: 16px 8px 8px 8px;\n\n  ${media.sm`\n    padding: 16px 12px 4px 12px;\n  `}\n`\n\nexport const SliderWrapper = styled.div`\n  width: 260px;\n`\n\nexport const SwitchPair = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex: 1;\n\n  svg {\n    width: 24px;\n    height: 24px;\n    color: ${palette('primary', 0)};\n    transform: rotate(90deg);\n  }\n`\n\nexport const ConfirmButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  padding: 0 2%;\n\n  margin-top: 14px;\n\n  button {\n    flex: 1;\n  }\n`\n\nexport const ConfirmModalContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n`\n\nexport const DetailContent = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  width: 100%;\n  padding: 8px;\n  margin-top: 14px;\n\n  border: 1px solid ${palette('gray', 0)};\n`\n\nexport const ApproveBtn = styled(FancyButton)`\n  margin-right: 8px;\n`\n","import React, { useMemo, useState, useCallback } from 'react'\n\nimport { PlusOutlined } from '@ant-design/icons'\nimport { THORChain } from '@xchainjs/xchain-thorchain'\nimport {\n  AssetInputCard,\n  Slider,\n  ConfirmModal,\n  Information,\n  Notification,\n  FancyButton,\n} from 'components'\nimport {\n  Amount,\n  Asset,\n  getAssetBalance,\n  Pool,\n  Price,\n  Liquidity,\n  AssetAmount,\n  Percent,\n  getEstimatedTxTime,\n  SupportedChain,\n} from 'multichain-sdk'\n\nimport { LiquidityProvider, TxTrackerType } from 'redux/midgard/types'\n\nimport { useBalance } from 'hooks/useBalance'\nimport { useMimir } from 'hooks/useMimir'\nimport { useNetworkFee } from 'hooks/useNetworkFee'\nimport { useTxTracker } from 'hooks/useTxTracker'\n\nimport { multichain } from 'services/multichain'\n\nimport {\n  TX_FEE_TOOLTIP_LABEL,\n  SLIP_TOOLTIP_LABEL,\n  ESTIMATED_TIME_LABEL,\n  ESTIMATED_POOL_SHARE_LABEL,\n} from 'settings/constants/label'\n\nimport * as Styled from './Add.style'\nimport { getMaxSymAmounts } from './utils'\n\nexport const AddLiquidityPanel = ({\n  pool,\n  pools,\n  assetObj: poolAsset,\n  data,\n}: {\n  assetObj: Asset\n  pool: Pool\n  pools: Pool[]\n  data: LiquidityProvider\n}) => {\n  const { wallet, getMaxBalance } = useBalance()\n  const { submitTransaction, pollTransaction, setTxFailed } = useTxTracker()\n\n  const { isFundsCapReached } = useMimir()\n\n  const { inboundFee: inboundAssetFee } = useNetworkFee({\n    inputAsset: pool.asset,\n  })\n\n  const { inboundFee: inboundRuneFee } = useNetworkFee({\n    inputAsset: Asset.RUNE(),\n  })\n\n  const isAssetPending = useMemo(() => Number(data.pending_asset) > 0, [data])\n\n  const pendingAmount = useMemo(() => {\n    if (Number(data.pending_asset) > 0) {\n      return Amount.fromMidgard(data.pending_asset)\n    }\n\n    return Amount.fromMidgard(data.pending_rune)\n  }, [data])\n\n  const [assetAmount, setAssetAmount] = useState<Amount>(\n    isAssetPending ? pendingAmount : Amount.fromAssetAmount(0, 8),\n  )\n  const [runeAmount, setRuneAmount] = useState<Amount>(\n    !isAssetPending ? pendingAmount : Amount.fromAssetAmount(0, 8),\n  )\n  const [percent, setPercent] = useState(0)\n  const [visibleConfirmModal, setVisibleConfirmModal] = useState(false)\n\n  const feeLabel = useMemo(() => {\n    if (!isAssetPending) {\n      return `${inboundRuneFee.toCurrencyFormat()} (${inboundRuneFee\n        .totalPriceIn(Asset.USD(), pools)\n        .toCurrencyFormat(2)})`\n    }\n\n    return `${inboundAssetFee.toCurrencyFormat()} (${inboundAssetFee\n      .totalPriceIn(Asset.USD(), pools)\n      .toCurrencyFormat(2)})`\n  }, [isAssetPending, inboundAssetFee, inboundRuneFee, pools])\n\n  const liquidityUnits = useMemo(() => {\n    return Amount.fromMidgard(data.units)\n  }, [data])\n\n  const liquidityEntity = useMemo(() => {\n    return new Liquidity(pool, liquidityUnits)\n  }, [pool, liquidityUnits])\n\n  const addLiquiditySlip = useMemo(() => {\n    return (liquidityEntity.getLiquiditySlip(\n      runeAmount,\n      assetAmount,\n    ) as Percent).toFixed(2)\n  }, [liquidityEntity, assetAmount, runeAmount])\n\n  const poolShareEst = useMemo(() => {\n    return liquidityEntity.getPoolShareEst(runeAmount, assetAmount).toFixed(3)\n  }, [liquidityEntity, assetAmount, runeAmount])\n\n  const poolAssetPriceInUSD = useMemo(\n    () =>\n      new Price({\n        baseAsset: poolAsset,\n        pools,\n        priceAmount: assetAmount,\n      }),\n    [poolAsset, assetAmount, pools],\n  )\n\n  const runeAssetPriceInUSD = useMemo(\n    () =>\n      new Price({\n        baseAsset: Asset.RUNE(),\n        pools,\n        priceAmount: runeAmount,\n      }),\n    [runeAmount, pools],\n  )\n\n  const poolAssetBalance: Amount = useMemo(() => {\n    if (wallet) {\n      return getAssetBalance(poolAsset, wallet).amount\n    }\n\n    // allow max amount if wallet is not connected\n    return Amount.fromAssetAmount(10 ** 3, 8)\n  }, [poolAsset, wallet])\n\n  const maxPoolAssetBalance: Amount = useMemo(\n    () => (isAssetPending ? pendingAmount : getMaxBalance(poolAsset)),\n    [poolAsset, getMaxBalance, isAssetPending, pendingAmount],\n  )\n\n  const runeBalance: Amount = useMemo(() => {\n    if (wallet) {\n      return getAssetBalance(Asset.RUNE(), wallet).amount\n    }\n\n    // allow max amount if wallet is not connected\n    return Amount.fromAssetAmount(10 ** 3, 8)\n  }, [wallet])\n\n  const maxRuneBalance: Amount = useMemo(\n    () => (!isAssetPending ? pendingAmount : getMaxBalance(Asset.RUNE())),\n    [getMaxBalance, isAssetPending, pendingAmount],\n  )\n\n  const { maxSymAssetAmount, maxSymRuneAmount } = getMaxSymAmounts({\n    runeAmount: maxRuneBalance,\n    assetAmount: maxPoolAssetBalance,\n    pool,\n  })\n\n  const handleChangePercent = useCallback(\n    (p: number) => {\n      setPercent(p)\n\n      if (isAssetPending) {\n        setRuneAmount(maxSymRuneAmount.mul(p).div(100))\n      } else {\n        setAssetAmount(maxSymAssetAmount.mul(p).div(100))\n      }\n    },\n    [maxSymRuneAmount, maxSymAssetAmount, isAssetPending],\n  )\n\n  const handleChangePendingAmount = useCallback(\n    (amount: Amount) => {\n      if (isAssetPending) {\n        const maxAmount = maxSymRuneAmount\n        if (amount.gt(maxAmount)) {\n          setRuneAmount(maxAmount)\n        } else {\n          setRuneAmount(amount)\n          setPercent(amount.div(maxAmount).mul(100).assetAmount.toNumber())\n        }\n      } else {\n        const maxAmount = maxSymAssetAmount\n        if (amount.gt(maxAmount)) {\n          setAssetAmount(maxAmount)\n        } else {\n          setAssetAmount(amount)\n          setPercent(amount.div(maxAmount).mul(100).assetAmount.toNumber())\n        }\n      }\n    },\n    [isAssetPending, maxSymRuneAmount, maxSymAssetAmount],\n  )\n\n  const inputAsset = useMemo(() => {\n    if (isAssetPending) return Asset.RUNE()\n\n    return poolAsset\n  }, [isAssetPending, poolAsset])\n\n  const handleConfirmAdd = useCallback(async () => {\n    setVisibleConfirmModal(false)\n    if (wallet) {\n      if (isAssetPending) {\n        const runeAssetAmount = new AssetAmount(Asset.RUNE(), runeAmount)\n        const poolAssetAmount = undefined\n\n        const inAssets = []\n        inAssets.push({\n          asset: Asset.RUNE().toString(),\n          amount: runeAmount.toSignificant(6),\n        })\n        // register to tx tracker\n        const trackId = submitTransaction({\n          type: TxTrackerType.AddLiquidity,\n          submitTx: {\n            inAssets,\n            outAssets: [],\n            poolAsset: poolAsset.ticker,\n          },\n        })\n\n        try {\n          const txRes = await multichain.addLiquidity(\n            {\n              pool,\n              runeAmount: runeAssetAmount,\n              assetAmount: poolAssetAmount,\n            },\n            'sym_rune',\n          )\n\n          const runeTxHash = txRes?.runeTx\n          const assetTxHash = txRes?.assetTx\n\n          if (runeTxHash || assetTxHash) {\n            // start polling\n            pollTransaction({\n              type: TxTrackerType.AddLiquidity,\n              uuid: trackId,\n              submitTx: {\n                inAssets,\n                outAssets: [],\n                txID: runeTxHash || assetTxHash,\n                addTx: {\n                  runeTxID: runeTxHash,\n                  assetTxID: assetTxHash,\n                },\n                poolAsset: poolAsset.ticker,\n              },\n            })\n          }\n        } catch (error) {\n          setTxFailed(trackId)\n          Notification({\n            type: 'error',\n            message: 'Submit Transaction Failed.',\n            duration: 20,\n          })\n          console.log(error)\n        }\n      } else {\n        const runeAssetAmount = undefined\n        const poolAssetAmount = new AssetAmount(poolAsset, assetAmount)\n\n        const inAssets = []\n        inAssets.push({\n          asset: poolAsset.toString(),\n          amount: assetAmount.toSignificant(6),\n        })\n        // register to tx tracker\n        const trackId = submitTransaction({\n          type: TxTrackerType.AddLiquidity,\n          submitTx: {\n            inAssets,\n            outAssets: [],\n            poolAsset: poolAsset.ticker,\n          },\n        })\n\n        try {\n          const txRes = await multichain.addLiquidity(\n            {\n              pool,\n              runeAmount: runeAssetAmount,\n              assetAmount: poolAssetAmount,\n            },\n            'sym_asset',\n          )\n\n          const runeTxHash = txRes?.runeTx\n          const assetTxHash = txRes?.assetTx\n\n          if (runeTxHash || assetTxHash) {\n            // start polling\n            pollTransaction({\n              type: TxTrackerType.AddLiquidity,\n              uuid: trackId,\n              submitTx: {\n                inAssets,\n                outAssets: [],\n                txID: runeTxHash || assetTxHash,\n                addTx: {\n                  runeTxID: runeTxHash,\n                  assetTxID: assetTxHash,\n                },\n                poolAsset: poolAsset.ticker,\n              },\n            })\n          }\n        } catch (error) {\n          setTxFailed(trackId)\n          Notification({\n            type: 'error',\n            message: 'Submit Transaction Failed.',\n            duration: 20,\n          })\n          console.log(error)\n        }\n      }\n    }\n  }, [\n    isAssetPending,\n    wallet,\n    pool,\n    poolAsset,\n    runeAmount,\n    assetAmount,\n    submitTransaction,\n    pollTransaction,\n    setTxFailed,\n  ])\n\n  const handleCancel = useCallback(() => {\n    setVisibleConfirmModal(false)\n  }, [])\n\n  const handleAddLiquidity = useCallback(() => {\n    if (!wallet) {\n      Notification({\n        type: 'info',\n        message: 'Wallet Not Found',\n        description: 'Please connect wallet',\n      })\n      return\n    }\n\n    if (isFundsCapReached) {\n      Notification({\n        type: 'info',\n        message: 'Funds Cap Reached',\n        description:\n          'You cannot add due to 90% Funds Cap has been reached. Please try again later.',\n      })\n      return\n    }\n\n    setVisibleConfirmModal(true)\n  }, [wallet, isFundsCapReached])\n\n  const renderConfirmModalContent = useMemo(() => {\n    const title = isAssetPending\n      ? `${runeAmount.toSignificant(6)} RUNE`\n      : `${assetAmount.toSignificant(6)} ${poolAsset.ticker}`\n    const estimatedTime = isAssetPending\n      ? getEstimatedTxTime({\n          chain: THORChain,\n          amount: runeAmount,\n        })\n      : getEstimatedTxTime({\n          chain: poolAsset.chain as SupportedChain,\n          amount: assetAmount,\n        })\n\n    return (\n      <Styled.ConfirmModalContent>\n        <Information title=\"Add\" description={title} />\n        <br />\n        <Information\n          title=\"Slip\"\n          description={addLiquiditySlip}\n          tooltip={SLIP_TOOLTIP_LABEL}\n        />\n        <Information\n          title=\"Pool Share Estimated\"\n          description={poolShareEst}\n          tooltip={ESTIMATED_POOL_SHARE_LABEL}\n        />\n        <Information\n          title=\"Transaction Fee\"\n          description={feeLabel}\n          tooltip={TX_FEE_TOOLTIP_LABEL}\n        />\n        <Information\n          title=\"Estimated Time\"\n          description={estimatedTime}\n          tooltip={ESTIMATED_TIME_LABEL}\n        />\n      </Styled.ConfirmModalContent>\n    )\n  }, [\n    runeAmount,\n    addLiquiditySlip,\n    poolShareEst,\n    feeLabel,\n    isAssetPending,\n    poolAsset,\n    assetAmount,\n  ])\n\n  const minRuneAmount: Amount = useMemo(\n    () => AssetAmount.getMinAmountByChain('THOR').amount,\n    [],\n  )\n  const minAssetAmount: Amount = useMemo(() => {\n    if (poolAsset.isGasAsset()) {\n      return AssetAmount.getMinAmountByChain(poolAsset.chain)\n    }\n\n    return Amount.fromAssetAmount(0, 8)\n  }, [poolAsset])\n\n  const isValidDeposit: {\n    valid: boolean\n    msg?: string\n  } = useMemo(() => {\n    if (!isAssetPending) {\n      if (!assetAmount.gt(minAssetAmount)) {\n        return {\n          valid: false,\n          msg: 'Insufficient Amount',\n        }\n      }\n    }\n\n    if (isAssetPending) {\n      if (!runeAmount.gt(minRuneAmount)) {\n        return {\n          valid: false,\n          msg: 'Insufficient Amount',\n        }\n      }\n    }\n\n    return { valid: true }\n  }, [isAssetPending, runeAmount, assetAmount, minRuneAmount, minAssetAmount])\n\n  return (\n    <Styled.ContentPanel>\n      <AssetInputCard\n        title={isAssetPending ? 'Pending' : 'Add To Complete'}\n        asset={poolAsset}\n        amount={assetAmount}\n        balance={poolAssetBalance}\n        usdPrice={poolAssetPriceInUSD}\n        inputProps={{ disabled: isAssetPending }}\n        wallet={wallet || undefined}\n        selectDisabled\n      />\n      <Styled.ToolContainer>\n        <Styled.SliderWrapper>\n          <Slider value={percent} onChange={handleChangePercent} withLabel />\n        </Styled.SliderWrapper>\n        <Styled.SwitchPair>\n          <PlusOutlined />\n        </Styled.SwitchPair>\n      </Styled.ToolContainer>\n      <AssetInputCard\n        title={!isAssetPending ? 'Pending' : 'Add To Complete'}\n        asset={Asset.RUNE()}\n        amount={runeAmount}\n        usdPrice={runeAssetPriceInUSD}\n        selectDisabled\n        balance={runeBalance}\n        onChange={handleChangePendingAmount}\n        wallet={wallet || undefined}\n        inputProps={{ disabled: !isAssetPending }}\n      />\n\n      <Styled.DetailContent>\n        <Information\n          title=\"Slip\"\n          description={addLiquiditySlip}\n          tooltip={SLIP_TOOLTIP_LABEL}\n        />\n        <Information\n          title=\"Pool Share Estimated\"\n          description={poolShareEst}\n          tooltip={ESTIMATED_POOL_SHARE_LABEL}\n        />\n        <Information\n          title=\"Transaction Fee\"\n          description={feeLabel}\n          tooltip={TX_FEE_TOOLTIP_LABEL}\n        />\n      </Styled.DetailContent>\n\n      <Styled.ConfirmButtonContainer>\n        <FancyButton onClick={handleAddLiquidity} error={!isValidDeposit.valid}>\n          {isValidDeposit.valid ? 'Add Liquidity' : isValidDeposit.msg}\n        </FancyButton>\n      </Styled.ConfirmButtonContainer>\n\n      <ConfirmModal\n        visible={visibleConfirmModal}\n        onOk={handleConfirmAdd}\n        onCancel={handleCancel}\n        inputAssets={[inputAsset]}\n      >\n        {renderConfirmModalContent}\n      </ConfirmModal>\n    </Styled.ContentPanel>\n  )\n}\n","import { Amount, Pool } from 'multichain-sdk'\n\nexport const getMaxSymAmounts = ({\n  assetAmount,\n  runeAmount,\n  pool,\n}: {\n  assetAmount: Amount\n  runeAmount: Amount\n  pool: Pool\n}) => {\n  const symAssetAmount = runeAmount.mul(pool.runePriceInAsset)\n\n  if (symAssetAmount.gt(assetAmount)) {\n    const maxSymAssetAmount = assetAmount\n    const maxSymRuneAmount = maxSymAssetAmount.mul(pool.assetPriceInRune)\n\n    return {\n      maxSymAssetAmount,\n      maxSymRuneAmount,\n    }\n  }\n  const maxSymAssetAmount = symAssetAmount\n  const maxSymRuneAmount = runeAmount\n\n  return {\n    maxSymAssetAmount,\n    maxSymRuneAmount,\n  }\n}\n","import styled from 'styled-components/macro'\n\nexport const ToolContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n\n  padding: 4px 10px;\n\n  a {\n    width: 100%;\n  }\n\n  button {\n    width: 100%;\n  }\n`\n\nexport const ConfirmModalContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n`\n","import React, { useState, useMemo, useCallback } from 'react'\n\nimport { THORChain } from '@xchainjs/xchain-thorchain'\nimport {\n  PanelView,\n  FancyButton,\n  Label,\n  ConfirmModal,\n  Information,\n  Notification,\n} from 'components'\nimport { Asset, Pool, Amount, Percent } from 'multichain-sdk'\n\nimport { PendingDepositCard } from 'components/PendingDepositCard'\n\nimport { LiquidityProvider, TxTrackerType } from 'redux/midgard/types'\nimport { useWallet } from 'redux/wallet/hooks'\n\nimport { usePendingLP } from 'hooks/usePendingLP'\nimport { useTxTracker } from 'hooks/useTxTracker'\n\nimport { multichain } from 'services/multichain'\n\nimport { TX_FEE_TOOLTIP_LABEL } from 'settings/constants/label'\n\nimport { AddLiquidityPanel } from './Add'\nimport * as Styled from './PendingDeposit.style'\n\ntype Option = {\n  type: 'add' | 'withdraw'\n  data: LiquidityProvider\n}\n\nconst PendingDepositView = () => {\n  const { wallet } = useWallet()\n  const { submitTransaction, pollTransaction, setTxFailed } = useTxTracker()\n  const [option, setOption] = useState<Option>()\n\n  const [visibleConfirmModal, setVisibleConfirmModal] = useState(false)\n\n  const {\n    pools,\n    pendingLP,\n    pendingLPLoading,\n    hasPendingDeposit,\n    getPendingDeposit,\n  } = usePendingLP()\n\n  const poolAsset = useMemo(() => {\n    if (!option) return null\n\n    const { data } = option\n    return Asset.fromAssetString(data.asset)\n  }, [option])\n  const pool = useMemo(() => {\n    if (!poolAsset) return null\n    return Pool.byAsset(poolAsset, pools)\n  }, [poolAsset, pools])\n\n  const handleComplete = useCallback((data: LiquidityProvider) => {\n    setOption({\n      type: 'add',\n      data,\n    })\n  }, [])\n\n  const handleWithdrawLiquidity = useCallback(() => {\n    if (wallet) {\n      setVisibleConfirmModal(true)\n    } else {\n      Notification({\n        type: 'info',\n        message: 'Wallet Not Found',\n        description: 'Please connect wallet',\n      })\n    }\n  }, [wallet])\n\n  const handleWithdraw = useCallback(\n    (data: LiquidityProvider) => {\n      setOption({\n        type: 'withdraw',\n        data,\n      })\n      handleWithdrawLiquidity()\n    },\n    [handleWithdrawLiquidity],\n  )\n\n  const renderPendingDeposit = useMemo(() => {\n    if (!wallet) return null\n\n    if (!hasPendingDeposit) {\n      return (\n        <>\n          <Styled.ToolContainer>\n            <FancyButton\n              size=\"small\"\n              onClick={getPendingDeposit}\n              loading={pendingLPLoading}\n            >\n              Check Pending Deposit\n            </FancyButton>\n          </Styled.ToolContainer>\n          <br />\n          <Label>You don't have any pending deposit.</Label>\n          <Label>It takes some time for the pending deposit to show up.</Label>\n        </>\n      )\n    }\n\n    return (\n      <>\n        <Styled.ToolContainer>\n          <FancyButton\n            size=\"small\"\n            onClick={getPendingDeposit}\n            loading={pendingLPLoading}\n          >\n            Check Pending Deposit\n          </FancyButton>\n        </Styled.ToolContainer>\n        {Object.keys(pendingLP).map((poolIndex) => {\n          const poolAssetObj = Asset.fromAssetString(poolIndex)\n          const data = pendingLP[poolIndex]\n\n          if (!poolAssetObj) return null\n          return (\n            <PendingDepositCard\n              poolAsset={poolAssetObj}\n              data={data}\n              key={poolIndex}\n              onComplete={() => handleComplete(data)}\n              onWithdraw={() => handleWithdraw(data)}\n            />\n          )\n        })}\n      </>\n    )\n  }, [\n    getPendingDeposit,\n    handleComplete,\n    handleWithdraw,\n    pendingLP,\n    pendingLPLoading,\n    hasPendingDeposit,\n    wallet,\n  ])\n\n  const renderDeposit = useMemo(() => {\n    if (!option || !wallet || !poolAsset || !pool) return null\n\n    const { data } = option\n\n    return (\n      <AddLiquidityPanel\n        pools={pools}\n        pool={pool}\n        assetObj={poolAsset}\n        data={data}\n      />\n    )\n  }, [option, pools, pool, poolAsset, wallet])\n\n  const pendingAsset = useMemo(() => {\n    if (!option) return null\n    const { data } = option\n    if (Number(data.pending_asset) > 0) {\n      return poolAsset\n    }\n\n    return Asset.RUNE()\n  }, [option, poolAsset])\n\n  const assetAmount = useMemo(() => {\n    if (!option) return null\n    const { data } = option\n    if (Number(data.pending_asset) > 0) {\n      return Amount.fromMidgard(option.data.pending_asset)\n    }\n\n    return Amount.fromMidgard(option.data.pending_rune)\n  }, [option])\n\n  const handleConfirmWithdraw = useCallback(async () => {\n    if (!poolAsset || !assetAmount || !pool) return null\n\n    setVisibleConfirmModal(false)\n    if (wallet && pendingAsset) {\n      const poolAssetString = poolAsset.toString()\n      let trackId = ''\n      try {\n        const outAssets = [\n          {\n            asset: pendingAsset.toString(),\n            amount: assetAmount.toSignificant(6),\n          },\n        ]\n\n        // register to tx tracker\n        trackId = submitTransaction({\n          type: TxTrackerType.Withdraw,\n          submitTx: {\n            inAssets: [],\n            outAssets,\n            poolAsset: poolAssetString,\n          },\n        })\n\n        const txID = await multichain.withdraw({\n          pool,\n          percent: new Percent(100),\n          from: 'sym',\n          to: 'sym',\n        })\n\n        // start polling\n        pollTransaction({\n          type: TxTrackerType.Withdraw,\n          uuid: trackId,\n          submitTx: {\n            inAssets: [],\n            outAssets,\n            poolAsset: poolAssetString,\n            txID,\n            withdrawChain: THORChain,\n          },\n        })\n      } catch (error) {\n        console.log(error)\n        setTxFailed(trackId)\n\n        Notification({\n          type: 'error',\n          message: 'Submit Transaction Failed.',\n          duration: 20,\n        })\n      }\n    }\n  }, [\n    wallet,\n    pool,\n    poolAsset,\n    pendingAsset,\n    assetAmount,\n    submitTransaction,\n    pollTransaction,\n    setTxFailed,\n  ])\n\n  const handleCancel = useCallback(() => {\n    setVisibleConfirmModal(false)\n  }, [])\n\n  const renderWithdrawConfirmModalContent = useMemo(() => {\n    if (!assetAmount || !pendingAsset) return null\n\n    return (\n      <Styled.ConfirmModalContent>\n        <Information\n          title=\"Withdraw\"\n          description={`Pending ${assetAmount.toSignificant(\n            6,\n          )} ${pendingAsset.ticker.toUpperCase()}`}\n        />\n        <Information\n          title=\"Transaction Fee\"\n          description=\"0.02 RUNE\"\n          tooltip={TX_FEE_TOOLTIP_LABEL}\n        />\n      </Styled.ConfirmModalContent>\n    )\n  }, [pendingAsset, assetAmount])\n\n  return (\n    <PanelView meta=\"Pending Deposit\" poolAsset={Asset.BTC()} type=\"pending\">\n      {!wallet && <Label>Please connect wallet.</Label>}\n      {renderPendingDeposit}\n      {option?.type === 'add' && renderDeposit}\n      <ConfirmModal\n        visible={visibleConfirmModal}\n        onOk={handleConfirmWithdraw}\n        onCancel={handleCancel}\n        inputAssets={[Asset.RUNE()]}\n      >\n        {renderWithdrawConfirmModalContent}\n      </ConfirmModal>\n    </PanelView>\n  )\n}\n\nexport default PendingDepositView\n","import { useEffect, useCallback, useMemo } from 'react'\n\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { THORChain } from '@xchainjs/xchain-util'\nimport { getWalletAddressByChain } from 'multichain-sdk'\n\nimport { getLiquidityProviderData } from 'redux/midgard/actions'\nimport { RootState } from 'redux/store'\n\nexport const usePendingLP = () => {\n  const dispatch = useDispatch()\n\n  const { wallet } = useSelector((state: RootState) => state.wallet)\n  const { pools, pendingLP, pendingLPLoading } = useSelector(\n    (state: RootState) => state.midgard,\n  )\n\n  const getPendingDeposit = useCallback(() => {\n    if (wallet) {\n      // const activePools = pools.filter(\n      //   (pool) => pool.detail.status === 'available',\n      // )\n      const thorAddress = getWalletAddressByChain(wallet, THORChain)\n\n      if (thorAddress) {\n        pools.forEach((pool) => {\n          dispatch(\n            getLiquidityProviderData({\n              address: thorAddress,\n              asset: pool.asset.toString(),\n            }),\n          )\n        })\n      }\n    }\n  }, [dispatch, wallet, pools])\n\n  useEffect(() => getPendingDeposit(), [getPendingDeposit])\n\n  const hasPendingDeposit = useMemo(() => Object.keys(pendingLP).length > 0, [\n    pendingLP,\n  ])\n\n  return {\n    getPendingDeposit,\n    pools,\n    pendingLP,\n    pendingLPLoading,\n    hasPendingDeposit,\n  }\n}\n","import PendingDeposit from './PendingDeposit'\n\nexport default PendingDeposit\n"],"sourceRoot":""}