{"version":3,"sources":["views/Statistics/StatisticsView.style.ts","views/Statistics/StatisticsView.tsx","views/Statistics/index.ts"],"names":["Container","styled","div","Section","SectionTitle","Label","attrs","weight","size","color","StatisticsView","useMidgard","stats","networkData","lastBlock","maxLiquidityRune","useMimir","runeToCurrency","useGlobalState","bondingAPYLabel","Percent","bondingAPY","toFixed","liquidityAPYLabel","liquidityAPY","swapVolume","Amount","fromMidgard","addLiquidityVolume","withdrawVolume","swapCount","fromNormalAmount","addLiquidityCount","withdrawCount","totalVolume","add","totalTx","networkStatsData","React","useMemo","title","value","totalReserve","toCurrencyFormat","blockRewards","blockReward","activeNodeCount","standbyNodeCount","poolActivationCountdown","thorchain","nextChurnHeight","volumeStatsData","liquidityStatsData","runeDepth","mul","totalPooledRune","toAbbreviate","switchedRune","userStatsData","uniqueSwapperCount","swapCount24h","swapCount30d","monthlyActiveUsers","dailyActiveUsers","content","gutter","map","statProps","index","xs","span","sm","md","lg","xl"],"mappings":"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","file":"static/js/17.d03d2a45.chunk.js","sourcesContent":["import { Label } from 'components'\nimport styled from 'styled-components/macro'\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nexport const Section = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  padding: 10px 0;\n`\n\nexport const SectionTitle = styled(Label).attrs({\n  weight: 'bold',\n  size: 'large',\n  color: 'primary',\n})`\n  margin-bottom: 8px;\n`\n","import React from 'react'\n\nimport { Row, Col } from 'antd'\nimport { Helmet, StatsCard } from 'components'\nimport { Percent, Amount } from 'multichain-sdk'\n\nimport { useGlobalState } from 'redux/hooks'\nimport { useMidgard } from 'redux/midgard/hooks'\n\nimport { useMimir } from 'hooks/useMimir'\n\nimport * as Styled from './StatisticsView.style'\n\nconst StatisticsView: React.FC = (): JSX.Element => {\n  const { stats, networkData, lastBlock } = useMidgard()\n  const { maxLiquidityRune } = useMimir()\n  const { runeToCurrency } = useGlobalState()\n\n  const bondingAPYLabel = new Percent(networkData?.bondingAPY ?? 0).toFixed(2)\n  const liquidityAPYLabel = new Percent(networkData?.liquidityAPY ?? 0).toFixed(\n    2,\n  )\n\n  const swapVolume = Amount.fromMidgard(stats?.swapVolume)\n  const addLiquidityVolume = Amount.fromMidgard(stats?.addLiquidityVolume)\n  const withdrawVolume = Amount.fromMidgard(stats?.withdrawVolume)\n\n  const swapCount = Amount.fromNormalAmount(stats?.swapCount)\n  const addLiquidityCount = Amount.fromNormalAmount(stats?.addLiquidityCount)\n  const withdrawCount = Amount.fromNormalAmount(stats?.withdrawCount)\n\n  const totalVolume = swapVolume.add(addLiquidityVolume).add(withdrawVolume)\n  const totalTx = swapCount.add(addLiquidityCount).add(withdrawCount)\n\n  const networkStatsData = React.useMemo(() => {\n    return [\n      {\n        title: 'Bonding APY',\n        value: bondingAPYLabel,\n      },\n      {\n        title: 'Total Reserve',\n        value: runeToCurrency(\n          Amount.fromMidgard(networkData?.totalReserve),\n        ).toCurrencyFormat(2),\n      },\n      {\n        title: 'Block Reward',\n        value: runeToCurrency(\n          Amount.fromMidgard(networkData?.blockRewards?.blockReward),\n        ).toCurrencyFormat(2),\n      },\n      {\n        title: 'Active Node Count',\n        value: Amount.fromNormalAmount(networkData?.activeNodeCount).toFixed(0),\n      },\n      {\n        title: 'Standby Node Count',\n        value: Amount.fromNormalAmount(networkData?.standbyNodeCount).toFixed(\n          0,\n        ),\n      },\n      {\n        title: 'Pool Activation Countdown',\n        value: Amount.fromNormalAmount(\n          networkData?.poolActivationCountdown,\n        ).toFixed(0),\n      },\n      {\n        title: 'Current Block Height',\n        value: Amount.fromNormalAmount(lastBlock?.[0]?.thorchain).toFixed(0),\n      },\n      {\n        title: 'Next Churn Height',\n        value: Amount.fromNormalAmount(networkData?.nextChurnHeight).toFixed(0),\n      },\n    ]\n  }, [lastBlock, networkData, bondingAPYLabel, runeToCurrency])\n\n  const volumeStatsData = React.useMemo(() => {\n    return [\n      {\n        title: 'Total Volume',\n        value: runeToCurrency(totalVolume).toCurrencyFormat(2),\n      },\n      {\n        title: 'Swap Volume',\n        value: runeToCurrency(\n          Amount.fromMidgard(stats?.swapVolume),\n        ).toCurrencyFormat(2),\n      },\n      {\n        title: 'Deposit Volume',\n        value: runeToCurrency(\n          Amount.fromMidgard(stats?.addLiquidityVolume),\n        ).toCurrencyFormat(2),\n      },\n      {\n        title: 'Withdraw Volume',\n        value: runeToCurrency(\n          Amount.fromMidgard(stats?.withdrawVolume),\n        ).toCurrencyFormat(2),\n      },\n    ]\n  }, [stats, totalVolume, runeToCurrency])\n\n  const liquidityStatsData = React.useMemo(() => {\n    return [\n      {\n        title: 'Total Liquidity',\n        value: runeToCurrency(\n          Amount.fromMidgard(stats?.runeDepth).mul(2),\n        ).toCurrencyFormat(2),\n      },\n      {\n        title: 'Total RUNE Pooled',\n        value: `${Amount.fromMidgard(\n          networkData?.totalPooledRune,\n        ).toAbbreviate()} RUNE`,\n      },\n      {\n        title: 'Max RUNE Liquidity',\n        value: `${maxLiquidityRune?.toAbbreviate() ?? 'N/A'} RUNE`,\n      },\n      {\n        title: 'Upgraded RUNE',\n        value: `${Amount.fromMidgard(stats?.switchedRune).toAbbreviate()} RUNE`,\n      },\n      {\n        title: 'Liquidity APY',\n        value: liquidityAPYLabel,\n      },\n    ]\n  }, [stats, networkData, maxLiquidityRune, liquidityAPYLabel, runeToCurrency])\n\n  const userStatsData = React.useMemo(() => {\n    return [\n      {\n        title: 'Total Tx',\n        value: totalTx.toFixed(),\n      },\n      {\n        title: 'Swap Count',\n        value: Amount.fromNormalAmount(stats?.swapCount).toFixed(0),\n      },\n      {\n        title: 'Unique Swapper Count',\n        value: Amount.fromNormalAmount(stats?.uniqueSwapperCount).toFixed(0),\n      },\n      {\n        title: 'Swap Count 24H',\n        value: Amount.fromNormalAmount(stats?.swapCount24h).toFixed(0),\n      },\n      {\n        title: 'Swap Count 30D',\n        value: Amount.fromNormalAmount(stats?.swapCount30d).toFixed(0),\n      },\n      {\n        title: 'Add Liquidity Count',\n        value: Amount.fromNormalAmount(stats?.addLiquidityCount).toFixed(0),\n      },\n      {\n        title: 'Withdraw Count',\n        value: Amount.fromNormalAmount(stats?.withdrawCount).toFixed(0),\n      },\n      {\n        title: 'Monthly Active Users',\n        value: Amount.fromNormalAmount(stats?.monthlyActiveUsers).toFixed(0),\n      },\n      {\n        title: 'Daily Active Users',\n        value: Amount.fromNormalAmount(stats?.dailyActiveUsers).toFixed(0),\n      },\n    ]\n  }, [stats, totalTx])\n\n  return (\n    <Styled.Container>\n      <Helmet title=\"Stats\" content=\"Stats\" />\n      <Styled.Section>\n        <Styled.SectionTitle weight=\"bold\" color=\"primary\" size=\"large\">\n          Volume\n        </Styled.SectionTitle>\n        <Row gutter={[16, 16]}>\n          {volumeStatsData.map((statProps, index) => {\n            return (\n              <Col\n                key={index}\n                xs={{ span: 24 }}\n                sm={{ span: 12 }}\n                md={{ span: 8 }}\n                lg={{ span: 8 }}\n                xl={{ span: 4 }}\n              >\n                <StatsCard {...statProps} />\n              </Col>\n            )\n          })}\n        </Row>\n      </Styled.Section>\n      <Styled.Section>\n        <Styled.SectionTitle weight=\"bold\" color=\"primary\" size=\"large\">\n          Liquidity\n        </Styled.SectionTitle>\n        <Row gutter={[16, 16]}>\n          {liquidityStatsData.map((statProps, index) => {\n            return (\n              <Col\n                key={index}\n                xs={{ span: 24 }}\n                sm={{ span: 12 }}\n                md={{ span: 8 }}\n                lg={{ span: 8 }}\n                xl={{ span: 4 }}\n              >\n                <StatsCard {...statProps} />\n              </Col>\n            )\n          })}\n        </Row>\n      </Styled.Section>\n      <Styled.Section>\n        <Styled.SectionTitle weight=\"bold\" color=\"primary\" size=\"large\">\n          Network\n        </Styled.SectionTitle>\n        <Row gutter={[16, 16]}>\n          {networkStatsData.map((statProps, index) => {\n            return (\n              <Col\n                key={index}\n                xs={{ span: 24 }}\n                sm={{ span: 12 }}\n                md={{ span: 8 }}\n                lg={{ span: 8 }}\n                xl={{ span: 4 }}\n              >\n                <StatsCard {...statProps} />\n              </Col>\n            )\n          })}\n        </Row>\n      </Styled.Section>\n      <Styled.Section>\n        <Styled.SectionTitle weight=\"bold\" color=\"primary\" size=\"large\">\n          Users, Transactions\n        </Styled.SectionTitle>\n        <Row gutter={[16, 16]}>\n          {userStatsData.map((statProps, index) => {\n            return (\n              <Col\n                key={index}\n                xs={{ span: 24 }}\n                sm={{ span: 12 }}\n                md={{ span: 8 }}\n                lg={{ span: 8 }}\n                xl={{ span: 4 }}\n              >\n                <StatsCard {...statProps} />\n              </Col>\n            )\n          })}\n        </Row>\n      </Styled.Section>\n    </Styled.Container>\n  )\n}\n\nexport default StatisticsView\n","import StatisticsView from './StatisticsView'\n\nexport default StatisticsView\n"],"sourceRoot":""}