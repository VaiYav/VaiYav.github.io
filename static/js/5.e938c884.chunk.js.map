{"version":3,"sources":["helpers/networkFee.ts","hooks/useNetworkFee.ts","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v4.js","hooks/useTxTracker.ts","hooks/useBalance.ts","views/Swap/Swap.style.ts","views/Swap/utils.ts","views/Swap/Swap.tsx","hooks/useApprove.ts","views/Swap/index.ts"],"names":["multiplier","average","fast","fastest","getGasRateByChain","inboundData","chain","chainInboundData","find","data","Number","gas_rate","getGasRateByFeeOption","feeOptionType","useNetworkFee","inputAsset","outputAsset","useApp","useMidgard","pools","inboundFee","useMemo","gasRate","NetworkFee","getNetworkFeeByAsset","asset","direction","outboundFee","totalFee","outboundFeeInSendAsset","AssetAmount","Amount","fromAssetAmount","totalPriceIn","price","decimal","eq","add","totalFeeInUSD","Asset","USD","getSumAmountInUSD","assetAmount1","assetAmount2","assetAmount1InUSD","assetAmount2InUSD","toCurrencyFormat","sum","raw","plus","toFixed","getRandomValues","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","validate","uuid","REGEX","test","byteToHex","i","push","toString","substr","stringify","arr","offset","arguments","length","undefined","toLowerCase","TypeError","v4","options","buf","rnds","random","useTxTracker","addNewTxTracker","updateTxTracker","clearTxTrackers","processSubmittedTx","submitTransaction","useCallback","type","submitTx","uuidv4","status","TxTrackerStatus","Submitting","action","refunded","pollTransaction","txTracker","Pending","setTxFailed","Failed","useBalance","dispatch","useDispatch","useSelector","state","app","wallet","midgard","reloadBalanceByChain","walletActions","reloadAllBalance","getMaxBalance","balance","getAssetBalance","amount","maxSpendableAmount","isGasAsset","sub","mul","gt","ToolContainer","styled","div","SliderWrapper","SwitchPair","palette","ConfirmButtonContainer","ConfirmModalContent","RecipientAddrWrapper","SwapInfo","ApproveBtn","FancyButton","getSwapPair","pair","a","split","input","output","fromAssetString","setDecimal","SwapPage","history","useHistory","allPools","poolLoading","slippageTolerance","hasWallet","approveStatus","useWallet","useState","isApproved","setApproved","isWalletConnected","hasConnectedWallet","useEffect","Success","multichain","isAssetApproved","approved","checkApproved","assetApproveStatus","useApprove","walletConnected","hasWalletConnected","inputAssets","filter","detail","poolAssets","assets","map","pool","RUNE","getInputAssets","inputAmount","setInputAmount","percent","setPercent","chainRecipient","setChainRecipient","recipient","setRecipient","visibleConfirmModal","setVisibleConfirmModal","visibleApproveModal","setVisibleApproveModal","isValidAddress","validateAddress","address","swap","inputAssetAmount","inboundFeeInInputAsset","outboundFeeInOutputAsset","Swap","slip","fee","error","console","log","outputAmount","outputAmountAfterFee","slipPercent","Percent","minReceive","minOutputAmount","inputAssetPriceInUSD","Price","baseAsset","priceAmount","outputAssetPriceInUSD","getWalletAddressByChain","maxInputBalance","inputAssetBalance","handleSelectInputAsset","getSwapRoute","handleSelectOutputAsset","handleSwitchPair","handleChangeInputAmount","assetAmount","toNumber","handleChangePercent","p","newAmount","handleSelectMax","handleConfirm","trackId","TxTrackerType","inAssets","toSignificant","outAssets","txHash","txID","Notification","message","description","duration","handleCancel","handleConfirmApprove","Approve","approveAsset","handleSwap","hasInSufficientFee","handleApprove","isValidSwap","isValid","valid","isValidSlip","isSlipValid","btnLabel","msg","estimatedTime","getEstimatedTxTime","renderConfirmModalContent","title","ticker","toUpperCase","truncateAddress","tooltip","SLIP_TOOLTIP_LABEL","MIN_RECEIVED_LABEL","TX_FEE_TOOLTIP_LABEL","ESTIMATED_TIME_LABEL","renderApproveModal","poolAsset","isRUNE","meta","onChange","onSelect","onMax","usdPrice","value","withLabel","onClick","SwapOutlined","inputProps","disabled","chainAddr","onAddressChange","loading","visible","onOk","onCancel","SwapView","useParams","swapPair","setSwapPair","swapPairData","getPair"],"mappings":"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","file":"static/js/5.e938c884.chunk.js","sourcesContent":["import { FeeOptionKey } from '@xchainjs/xchain-client'\nimport { Chain } from '@xchainjs/xchain-util'\nimport { InboundAddressesItem } from 'midgard-sdk'\n\nconst multiplier: Record<FeeOptionKey, number> = {\n  average: 0.67,\n  fast: 1,\n  fastest: 1.5,\n}\n\n// Reference issue: https://github.com/thorchain/asgardex-electron/issues/1381\nexport const getGasRateByChain = ({\n  inboundData,\n  chain,\n}: {\n  inboundData: InboundAddressesItem[]\n  chain: Chain\n}): number => {\n  const chainInboundData = inboundData.find((data) => data.chain === chain)\n\n  return Number(chainInboundData?.gas_rate ?? 0)\n}\n\nexport const getGasRateByFeeOption = ({\n  inboundData,\n  chain,\n  feeOptionType,\n}: {\n  inboundData: InboundAddressesItem[]\n  chain: Chain\n  feeOptionType: FeeOptionKey\n}) => {\n  return getGasRateByChain({ inboundData, chain }) * multiplier[feeOptionType]\n}\n","import { useMemo } from 'react'\n\nimport { Asset, Amount, AssetAmount, NetworkFee, Pool } from 'multichain-sdk'\n\nimport { useApp } from 'redux/app/hooks'\nimport { useMidgard } from 'redux/midgard/hooks'\n\nimport { getGasRateByChain, getGasRateByFeeOption } from 'helpers/networkFee'\n\nexport const useNetworkFee = ({\n  inputAsset,\n  outputAsset,\n}: {\n  inputAsset: Asset\n  outputAsset?: Asset\n}) => {\n  const { feeOptionType } = useApp()\n  const { inboundData, pools } = useMidgard()\n\n  const inboundFee = useMemo(() => {\n    // get inbound gasRate with fee option\n    const gasRate = getGasRateByFeeOption({\n      inboundData,\n      chain: inputAsset.chain,\n      feeOptionType,\n    })\n    const networkFee = NetworkFee.getNetworkFeeByAsset({\n      asset: inputAsset,\n      gasRate,\n      direction: 'inbound',\n    })\n\n    return networkFee\n  }, [inputAsset, inboundData, feeOptionType])\n\n  const outboundFee = useMemo(() => {\n    if (!outputAsset) return null\n\n    const gasRate = getGasRateByChain({ inboundData, chain: outputAsset.chain })\n    const networkFee = NetworkFee.getNetworkFeeByAsset({\n      asset: outputAsset,\n      gasRate,\n      direction: 'outbound',\n    })\n\n    return networkFee\n  }, [outputAsset, inboundData])\n\n  const totalFee = useMemo(() => {\n    if (!outboundFee) return inboundFee\n\n    const outboundFeeInSendAsset = new AssetAmount(\n      inputAsset,\n      Amount.fromAssetAmount(\n        outboundFee.totalPriceIn(inputAsset, pools).price,\n        inputAsset.decimal,\n      ),\n    )\n\n    if (inboundFee.asset.eq(inputAsset)) {\n      return inboundFee.add(outboundFeeInSendAsset)\n    }\n\n    const inboundFeeInSendAsset = new AssetAmount(\n      inputAsset,\n      Amount.fromAssetAmount(\n        inboundFee.totalPriceIn(inputAsset, pools).price,\n        inputAsset.decimal,\n      ),\n    )\n    return inboundFeeInSendAsset.add(outboundFeeInSendAsset)\n  }, [inputAsset, inboundFee, outboundFee, pools])\n\n  const totalFeeInUSD = useMemo(\n    () => totalFee.totalPriceIn(Asset.USD(), pools),\n    [totalFee, pools],\n  )\n\n  return {\n    totalFee,\n    inboundFee,\n    outboundFee,\n    totalFeeInUSD,\n  }\n}\n\nexport const getSumAmountInUSD = (\n  assetAmount1: AssetAmount | null,\n  assetAmount2: AssetAmount | null,\n  pools: Pool[],\n) => {\n  const assetAmount1InUSD = assetAmount1?.totalPriceIn(Asset.USD(), pools)\n  const assetAmount2InUSD = assetAmount2?.totalPriceIn(Asset.USD(), pools)\n\n  if (assetAmount1 === null && assetAmount2InUSD)\n    return assetAmount2InUSD.toCurrencyFormat()\n  if (assetAmount2 === null && assetAmount1InUSD)\n    return assetAmount1InUSD.toCurrencyFormat()\n\n  if (assetAmount1InUSD && assetAmount2InUSD) {\n    const sum = assetAmount1InUSD.raw().plus(assetAmount2InUSD.raw())\n\n    return Amount.fromAssetAmount(sum, 8).toFixed(2)\n  }\n\n  return Amount.fromAssetAmount(0, 8).toFixed()\n}\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","import { useCallback } from 'react'\n\nimport { v4 as uuidv4 } from 'uuid'\n\nimport { useMidgard } from 'redux/midgard/hooks'\nimport { TxTrackerStatus, SubmitTx, TxTrackerType } from 'redux/midgard/types'\n\n/**\n * 1. send transaction and get txHash\n * 2. poll midgard action API and get \"in\" tx with the same txHash\n * 3. check action status (success, pending)\n * 4. check action type and match with send tx type\n *    (if action type is not \"refund\", action type should be matched to the send type)\n */\n\nexport const useTxTracker = () => {\n  const {\n    addNewTxTracker,\n    updateTxTracker,\n    clearTxTrackers,\n    processSubmittedTx,\n  } = useMidgard()\n\n  // confirm and submit a transaction\n  const submitTransaction = useCallback(\n    ({\n      type,\n      submitTx,\n    }: {\n      type: TxTrackerType\n      submitTx: SubmitTx\n    }): string => {\n      const uuid = uuidv4()\n\n      addNewTxTracker({\n        uuid,\n        type,\n        status: TxTrackerStatus.Submitting,\n        submitTx,\n        action: null,\n        refunded: null,\n      })\n\n      return uuid\n    },\n    [addNewTxTracker],\n  )\n\n  // start polling a transaction\n  const pollTransaction = useCallback(\n    ({\n      uuid,\n      submitTx,\n      type,\n    }: {\n      uuid: string\n      submitTx: SubmitTx\n      type: TxTrackerType\n    }) => {\n      updateTxTracker({\n        uuid,\n        txTracker: {\n          status: TxTrackerStatus.Pending,\n          submitTx,\n        },\n      })\n      processSubmittedTx({ submitTx, type })\n    },\n    [updateTxTracker, processSubmittedTx],\n  )\n\n  // start polling a transaction\n  const setTxFailed = useCallback(\n    (uuid: string) => {\n      updateTxTracker({\n        uuid,\n        txTracker: {\n          status: TxTrackerStatus.Failed,\n        },\n      })\n    },\n    [updateTxTracker],\n  )\n\n  return {\n    submitTransaction,\n    pollTransaction,\n    clearTxTrackers,\n    setTxFailed,\n  }\n}\n","import { useCallback } from 'react'\n\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { Asset, Amount, getAssetBalance, NetworkFee } from 'multichain-sdk'\n\nimport { SupportedChain } from 'multichain-sdk/clients/types'\n\nimport { RootState } from 'redux/store'\nimport * as walletActions from 'redux/wallet/actions'\n\nimport { getGasRateByFeeOption } from 'helpers/networkFee'\n\nexport const useBalance = () => {\n  const dispatch = useDispatch()\n  const { feeOptionType } = useSelector((state: RootState) => state.app)\n  const { wallet } = useSelector((state: RootState) => state.wallet)\n  const { inboundData } = useSelector((state: RootState) => state.midgard)\n\n  const reloadBalanceByChain = useCallback(\n    (chain: SupportedChain) => {\n      dispatch(walletActions.getWalletByChain(chain))\n    },\n    [dispatch],\n  )\n\n  const reloadAllBalance = useCallback(() => {\n    dispatch(walletActions.loadAllWallets())\n  }, [dispatch])\n\n  const getMaxBalance = useCallback(\n    (asset: Asset): Amount => {\n      if (!wallet?.[asset.chain as SupportedChain]) {\n        // allow max amount for emulation if wallet is not connected\n        return Amount.fromAssetAmount(10 ** 8, 8)\n      }\n\n      // calculate inbound fee\n      const gasRate = getGasRateByFeeOption({\n        inboundData,\n        chain: asset.chain,\n        feeOptionType,\n      })\n      const inboundFee = NetworkFee.getNetworkFeeByAsset({\n        asset,\n        gasRate,\n        direction: 'inbound',\n      })\n\n      const balance = getAssetBalance(asset, wallet).amount\n\n      /**\n       * if asset is used for gas, subtract the inbound gas fee from input amount\n       * else allow full amount\n       * Calc: max spendable amount = balance amount - 2 x gas fee(if send asset equals to gas asset)\n       */\n\n      const maxSpendableAmount = asset.isGasAsset()\n        ? balance.sub(inboundFee.mul(1.5).amount)\n        : balance\n\n      if (maxSpendableAmount.gt(0)) {\n        return maxSpendableAmount\n      }\n\n      return Amount.fromAssetAmount(0, asset.decimal)\n    },\n    [wallet, feeOptionType, inboundData],\n  )\n\n  return {\n    getMaxBalance,\n    reloadAllBalance,\n    reloadBalanceByChain,\n    wallet,\n  }\n}\n","import { FancyButton } from 'components'\nimport styled from 'styled-components/macro'\nimport { palette } from 'styled-theme'\n\nexport const ToolContainer = styled.div`\n  display: flex;\n\n  height: 60px;\n`\n\nexport const SliderWrapper = styled.div`\n  width: 260px;\n`\n\nexport const SwitchPair = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex: 1;\n\n  svg {\n    width: 24px;\n    height: 24px;\n    color: ${palette('primary', 0)};\n    transform: rotate(90deg);\n  }\n`\n\nexport const ConfirmButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  padding: 0 2%;\n\n  margin-top: 14px;\n\n  button {\n    flex: 1;\n  }\n`\n\nexport const ConfirmModalContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n`\n\nexport const RecipientAddrWrapper = styled.div`\n  margin-top: 14px;\n`\n\nexport const SwapInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  width: 100%;\n  padding: 8px;\n  margin-top: 14px;\n\n  border: 1px solid ${palette('gray', 0)};\n`\n\nexport const ApproveBtn = styled(FancyButton)`\n  margin-right: 8px;\n`\n","import { Asset } from 'multichain-sdk'\n\nimport { Pair } from './types'\n\nexport const getSwapPair = async (pair: string): Promise<Pair | null> => {\n  if (!pair || pair.split('_').length !== 2) {\n    return null\n  }\n\n  const input = pair.split('_')?.[0]\n  const output = pair.split('_')?.[1]\n\n  if (!input || !output) return null\n\n  const inputAsset = Asset.fromAssetString(input)\n  const outputAsset = Asset.fromAssetString(output)\n\n  if (!inputAsset || !outputAsset) return null\n\n  await inputAsset.setDecimal()\n  await outputAsset.setDecimal()\n\n  return {\n    inputAsset,\n    outputAsset,\n  }\n}\n","import React, { useEffect, useMemo, useState, useCallback } from 'react'\n\nimport { useHistory, useParams } from 'react-router'\n\nimport { SwapOutlined } from '@ant-design/icons'\nimport {\n  PanelView,\n  AddressSelectCard,\n  AssetInputCard,\n  Slider,\n  ConfirmModal,\n  Information,\n  Notification,\n  IconButton,\n  FancyButton,\n  PriceRate,\n} from 'components'\nimport {\n  getInputAssets,\n  Amount,\n  Asset,\n  AssetAmount,\n  getWalletAddressByChain,\n  Swap,\n  Percent,\n  Price,\n  getAssetBalance,\n  getEstimatedTxTime,\n  SupportedChain,\n  hasWalletConnected,\n  hasConnectedWallet,\n} from 'multichain-sdk'\n\nimport { useApp } from 'redux/app/hooks'\nimport { useMidgard } from 'redux/midgard/hooks'\nimport { TxTrackerStatus, TxTrackerType } from 'redux/midgard/types'\n\nimport { useApprove } from 'hooks/useApprove'\nimport { useBalance } from 'hooks/useBalance'\nimport { useNetworkFee } from 'hooks/useNetworkFee'\nimport { useTxTracker } from 'hooks/useTxTracker'\n\nimport { multichain } from 'services/multichain'\n\nimport { truncateAddress } from 'helpers/string'\n\nimport { getSwapRoute } from 'settings/constants'\nimport {\n  TX_FEE_TOOLTIP_LABEL,\n  SLIP_TOOLTIP_LABEL,\n  ESTIMATED_TIME_LABEL,\n  MIN_RECEIVED_LABEL,\n} from 'settings/constants/label'\n\nimport * as Styled from './Swap.style'\nimport { Pair } from './types'\nimport { getSwapPair } from './utils'\n\nconst SwapView = () => {\n  const { pair } = useParams<{ pair: string }>()\n  const [swapPair, setSwapPair] = useState<Pair>()\n\n  useEffect(() => {\n    const getPair = async () => {\n      const swapPairData = await getSwapPair(pair)\n\n      if (swapPairData) {\n        setSwapPair(swapPairData)\n      }\n    }\n\n    getPair()\n  }, [pair])\n\n  if (swapPair) {\n    const { inputAsset, outputAsset } = swapPair\n    return <SwapPage inputAsset={inputAsset} outputAsset={outputAsset} />\n  }\n\n  return null\n}\n\nconst SwapPage = ({ inputAsset, outputAsset }: Pair) => {\n  const history = useHistory()\n  const { wallet, getMaxBalance } = useBalance()\n  const { pools: allPools, poolLoading } = useMidgard()\n  const { slippageTolerance } = useApp()\n  const { submitTransaction, pollTransaction, setTxFailed } = useTxTracker()\n  const { isApproved, assetApproveStatus } = useApprove(inputAsset, !!wallet)\n\n  const { inboundFee, outboundFee, totalFeeInUSD } = useNetworkFee({\n    inputAsset,\n    outputAsset,\n  })\n\n  const walletConnected = useMemo(\n    () => hasWalletConnected({ wallet, inputAssets: [inputAsset] }),\n    [wallet, inputAsset],\n  )\n\n  const pools = useMemo(\n    () => allPools.filter((data) => data.detail.status === 'available'),\n    [allPools],\n  )\n  const poolAssets = useMemo(() => {\n    const assets = pools.map((pool) => pool.asset)\n    assets.push(Asset.RUNE())\n\n    return assets\n  }, [pools])\n\n  const inputAssets = useMemo(() => getInputAssets({ wallet, pools }), [\n    wallet,\n    pools,\n  ])\n\n  const [inputAmount, setInputAmount] = useState<Amount>(\n    Amount.fromAssetAmount(0, 8),\n  )\n  const [percent, setPercent] = useState(0)\n  const [chainRecipient, setChainRecipient] = useState('')\n  const [recipient, setRecipient] = useState('')\n  const [visibleConfirmModal, setVisibleConfirmModal] = useState(false)\n  const [visibleApproveModal, setVisibleApproveModal] = useState(false)\n\n  const isValidAddress = useMemo(\n    () =>\n      multichain.validateAddress({\n        chain: outputAsset.chain,\n        address: recipient,\n      }),\n    [outputAsset, recipient],\n  )\n\n  const swap: Swap | null = useMemo(() => {\n    if (poolLoading) return null\n\n    try {\n      const inputAssetAmount = new AssetAmount(inputAsset, inputAmount)\n\n      const inboundFeeInInputAsset = new AssetAmount(\n        inputAsset,\n        Amount.fromAssetAmount(\n          inboundFee.totalPriceIn(inputAsset, pools).price,\n          inputAsset.decimal,\n        ),\n      )\n\n      const outboundFeeInOutputAsset = outboundFee\n        ? new AssetAmount(\n            outputAsset,\n            Amount.fromAssetAmount(\n              outboundFee.totalPriceIn(outputAsset, pools).price,\n              outputAsset.decimal,\n            ),\n          )\n        : new AssetAmount(\n            outputAsset,\n            Amount.fromAssetAmount(0, outputAsset.decimal),\n          )\n\n      return new Swap({\n        inputAsset,\n        outputAsset,\n        pools,\n        amount: inputAssetAmount,\n        slip: slippageTolerance,\n        fee: {\n          inboundFee: inboundFeeInInputAsset,\n          outboundFee: outboundFeeInOutputAsset,\n        },\n      })\n    } catch (error) {\n      console.log(error)\n      return null\n    }\n  }, [\n    inputAsset,\n    outputAsset,\n    pools,\n    inputAmount,\n    slippageTolerance,\n    poolLoading,\n    inboundFee,\n    outboundFee,\n  ])\n\n  const outputAmount: Amount = useMemo(() => {\n    if (swap) {\n      return swap.outputAmountAfterFee.amount\n    }\n\n    return Amount.fromAssetAmount(0, 8)\n  }, [swap])\n\n  const slipPercent: Percent = useMemo(\n    () => (swap ? swap.slip : new Percent(0)),\n    [swap],\n  )\n\n  const minReceive: Amount = useMemo(\n    () => (swap ? swap.minOutputAmount : Amount.fromAssetAmount(0, 8)),\n    [swap],\n  )\n\n  const inputAssetPriceInUSD = useMemo(\n    () =>\n      new Price({\n        baseAsset: inputAsset,\n        pools,\n        priceAmount: inputAmount,\n      }),\n    [inputAsset, inputAmount, pools],\n  )\n\n  const outputAssetPriceInUSD = useMemo(\n    () =>\n      new Price({\n        baseAsset: outputAsset,\n        pools,\n        priceAmount: outputAmount,\n      }),\n    [outputAsset, outputAmount, pools],\n  )\n\n  useEffect(() => {\n    if (wallet) {\n      const address = getWalletAddressByChain(wallet, outputAsset.chain)\n      setRecipient(address || '')\n      setChainRecipient(address || '')\n    }\n  }, [wallet, outputAsset])\n\n  const maxInputBalance: Amount = useMemo(() => getMaxBalance(inputAsset), [\n    inputAsset,\n    getMaxBalance,\n  ])\n\n  const inputAssetBalance: Amount = useMemo(() => {\n    if (!wallet) {\n      // allow max amount for emulation if wallet is not connected\n      return Amount.fromAssetAmount(10 ** 3, 8)\n    }\n\n    return getAssetBalance(inputAsset, wallet)\n  }, [inputAsset, wallet])\n\n  const handleSelectInputAsset = useCallback(\n    (input: Asset) => {\n      history.push(getSwapRoute(input, outputAsset))\n    },\n    [history, outputAsset],\n  )\n\n  const handleSelectOutputAsset = useCallback(\n    (output: Asset) => {\n      history.push(getSwapRoute(inputAsset, output))\n    },\n    [history, inputAsset],\n  )\n\n  const handleSwitchPair = useCallback(() => {\n    history.push(getSwapRoute(outputAsset, inputAsset))\n  }, [history, inputAsset, outputAsset])\n\n  const handleChangeInputAmount = useCallback(\n    (amount: Amount) => {\n      if (amount.gt(maxInputBalance)) {\n        setInputAmount(maxInputBalance)\n        setPercent(100)\n      } else {\n        setInputAmount(amount)\n        setPercent(amount.div(maxInputBalance).mul(100).assetAmount.toNumber())\n      }\n    },\n    [maxInputBalance],\n  )\n\n  const handleChangePercent = useCallback(\n    (p: number) => {\n      setPercent(p)\n      const newAmount = maxInputBalance.mul(p).div(100)\n      setInputAmount(newAmount)\n    },\n    [maxInputBalance],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    handleChangePercent(100)\n  }, [handleChangePercent])\n\n  const handleConfirm = useCallback(async () => {\n    setVisibleConfirmModal(false)\n\n    if (wallet && swap) {\n      // register to tx tracker\n      const trackId = submitTransaction({\n        type: TxTrackerType.Swap,\n        submitTx: {\n          inAssets: [\n            {\n              asset: swap.inputAsset.toString(),\n              amount: swap.inputAmount.toSignificant(6),\n            },\n          ],\n          outAssets: [\n            {\n              asset: swap.outputAsset.toString(),\n              amount: swap.outputAmountAfterFee.toSignificant(6),\n            },\n          ],\n        },\n      })\n\n      try {\n        const txHash = await multichain.swap(swap, recipient)\n\n        // start polling\n        pollTransaction({\n          type: TxTrackerType.Swap,\n          uuid: trackId,\n          submitTx: {\n            inAssets: [\n              {\n                asset: swap.inputAsset.toString(),\n                amount: swap.inputAmount.toSignificant(6),\n              },\n            ],\n            outAssets: [\n              {\n                asset: swap.outputAsset.toString(),\n                amount: swap.outputAmountAfterFee.toSignificant(6),\n              },\n            ],\n            txID: txHash,\n          },\n        })\n      } catch (error) {\n        setTxFailed(trackId)\n\n        Notification({\n          type: 'error',\n          message: 'Submit Transaction Failed.',\n          description: error?.toString(),\n          duration: 20,\n        })\n        console.log(error)\n      }\n    }\n  }, [wallet, swap, recipient, submitTransaction, pollTransaction, setTxFailed])\n\n  const handleCancel = useCallback(() => {\n    setVisibleConfirmModal(false)\n  }, [])\n\n  const handleConfirmApprove = useCallback(async () => {\n    setVisibleApproveModal(false)\n\n    if (wallet) {\n      // register to tx tracker\n      const trackId = submitTransaction({\n        type: TxTrackerType.Approve,\n        submitTx: {\n          inAssets: [\n            {\n              asset: inputAsset.toString(),\n              amount: '0', // not needed for approve tx\n            },\n          ],\n        },\n      })\n\n      try {\n        const txHash = await multichain.approveAsset(inputAsset)\n        console.log('approve txhash', txHash)\n        if (txHash) {\n          // start polling\n          pollTransaction({\n            type: TxTrackerType.Swap,\n            uuid: trackId,\n            submitTx: {\n              inAssets: [\n                {\n                  asset: inputAsset.toString(),\n                  amount: '0', // not needed for approve tx\n                },\n              ],\n              txID: txHash,\n            },\n          })\n        }\n      } catch (error) {\n        setTxFailed(trackId)\n        Notification({\n          type: 'open',\n          message: 'Approve Failed.',\n          duration: 20,\n        })\n        console.log(error)\n      }\n    }\n  }, [inputAsset, wallet, setTxFailed, submitTransaction, pollTransaction])\n\n  const handleSwap = useCallback(() => {\n    if (walletConnected && swap) {\n      if (swap.hasInSufficientFee) {\n        Notification({\n          type: 'info',\n          message: 'Swap Insufficient Fee',\n          description: 'Input amount is not enough to cover the fee',\n        })\n        return\n      }\n\n      if (!isValidAddress) {\n        Notification({\n          type: 'error',\n          message: 'Invalid Recipient Address',\n          description: 'Recipient address should be a valid address.',\n        })\n        return\n      }\n\n      setVisibleConfirmModal(true)\n    } else {\n      Notification({\n        type: 'info',\n        message: 'Wallet Not Found',\n        description: 'Please connect wallet',\n      })\n    }\n  }, [isValidAddress, walletConnected, swap])\n\n  const handleApprove = useCallback(() => {\n    if (walletConnected && swap) {\n      setVisibleApproveModal(true)\n    } else {\n      Notification({\n        type: 'info',\n        message: 'Wallet Not Found',\n        description: 'Please connect wallet',\n      })\n    }\n  }, [walletConnected, swap])\n\n  const isValidSwap = useMemo(() => swap?.isValid() ?? { valid: false }, [swap])\n  const isValidSlip = useMemo(() => swap?.isSlipValid() ?? true, [swap])\n\n  const btnLabel = useMemo(() => {\n    if (isValidSwap.valid || inputAmount.eq(0)) return 'Swap'\n\n    return isValidSwap?.msg ?? 'Swap'\n  }, [isValidSwap, inputAmount])\n\n  const estimatedTime = useMemo(\n    () =>\n      getEstimatedTxTime({\n        chain: inputAsset.chain as SupportedChain,\n        amount: inputAmount,\n      }),\n    [inputAsset, inputAmount],\n  )\n\n  const renderConfirmModalContent = useMemo(() => {\n    return (\n      <Styled.ConfirmModalContent>\n        <Information\n          title=\"Send\"\n          description={`${inputAmount.toSignificant(\n            6,\n          )} ${inputAsset.ticker.toUpperCase()}`}\n        />\n        <Information\n          title=\"Receive\"\n          description={`${outputAmount.toSignificant(\n            6,\n          )} ${outputAsset.ticker.toUpperCase()}`}\n        />\n        <br />\n        <Information\n          title=\"Recipient Address\"\n          description={truncateAddress(recipient)}\n          error={!isValidAddress}\n        />\n        <br />\n        <Information\n          title=\"Slip\"\n          description={slipPercent.toFixed(3)}\n          error={!isValidSlip}\n          tooltip={SLIP_TOOLTIP_LABEL}\n        />\n        <Information\n          title=\"Minimum Received\"\n          description={`${minReceive.toSignificant(\n            6,\n          )} ${outputAsset.ticker.toUpperCase()}`}\n          tooltip={MIN_RECEIVED_LABEL}\n        />\n        <Information\n          title=\"Transaction Fee\"\n          description={inboundFee.toCurrencyFormat()}\n          tooltip={TX_FEE_TOOLTIP_LABEL}\n        />\n        <Information\n          title=\"Network Fee\"\n          description={outboundFee?.toCurrencyFormat() ?? ''}\n          tooltip=\"Thorchain network fee used to pay outbound transaction\"\n        />\n        <Information\n          title=\"Total Fee\"\n          description={totalFeeInUSD.toCurrencyFormat(2) ?? ''}\n          tooltip=\"Sum of both transaction fee and network fee\"\n        />\n        <Information\n          title=\"Estimated Time\"\n          description={estimatedTime}\n          tooltip={ESTIMATED_TIME_LABEL}\n        />\n      </Styled.ConfirmModalContent>\n    )\n  }, [\n    inputAmount,\n    outputAmount,\n    inputAsset,\n    outputAsset,\n    recipient,\n    slipPercent,\n    isValidSlip,\n    minReceive,\n    inboundFee,\n    outboundFee,\n    totalFeeInUSD,\n    estimatedTime,\n    isValidAddress,\n  ])\n\n  const renderApproveModal = useMemo(() => {\n    return (\n      <Styled.ConfirmModalContent>\n        <Information\n          title={`Approve ${inputAsset.ticker.toUpperCase()}`}\n          description=\"\"\n        />\n        <Information\n          title=\"Transaction Fee\"\n          description={inboundFee.toCurrencyFormat()}\n          tooltip={TX_FEE_TOOLTIP_LABEL}\n        />\n      </Styled.ConfirmModalContent>\n    )\n  }, [inboundFee, inputAsset])\n\n  const title = useMemo(\n    () => `Swap ${inputAsset.ticker} >> ${outputAsset.ticker}`,\n    [inputAsset, outputAsset],\n  )\n  const poolAsset = useMemo(\n    () => (inputAsset.isRUNE() ? outputAsset : inputAsset),\n    [inputAsset, outputAsset],\n  )\n\n  return (\n    <PanelView meta={title} poolAsset={poolAsset} type=\"swap\">\n      <AssetInputCard\n        title=\"send\"\n        asset={inputAsset}\n        assets={inputAssets}\n        amount={inputAmount}\n        balance={inputAssetBalance}\n        onChange={handleChangeInputAmount}\n        onSelect={handleSelectInputAsset}\n        onMax={handleSelectMax}\n        usdPrice={inputAssetPriceInUSD}\n        wallet={wallet || undefined}\n      />\n      <Styled.ToolContainer>\n        <Styled.SliderWrapper>\n          <Slider value={percent} onChange={handleChangePercent} withLabel />\n        </Styled.SliderWrapper>\n        <Styled.SwitchPair>\n          <IconButton onClick={handleSwitchPair}>\n            <SwapOutlined />\n          </IconButton>\n        </Styled.SwitchPair>\n      </Styled.ToolContainer>\n      <AssetInputCard\n        title=\"receive\"\n        asset={outputAsset}\n        assets={poolAssets}\n        amount={outputAmount}\n        onSelect={handleSelectOutputAsset}\n        inputProps={{ disabled: true }}\n        usdPrice={outputAssetPriceInUSD}\n        wallet={wallet || undefined}\n      />\n      {hasConnectedWallet(wallet) && (\n        <Styled.RecipientAddrWrapper>\n          <AddressSelectCard\n            title=\"Recipient Address\"\n            address={recipient}\n            chain={outputAsset.chain}\n            chainAddr={chainRecipient}\n            onAddressChange={setRecipient}\n          />\n        </Styled.RecipientAddrWrapper>\n      )}\n      <Styled.SwapInfo>\n        <PriceRate\n          price={swap?.price}\n          inputAsset={swap?.inputAsset}\n          outputAsset={swap?.outputAsset}\n        />\n        <Information\n          title=\"Slip\"\n          description={slipPercent.toFixed(3)}\n          error={!isValidSlip}\n          tooltip={SLIP_TOOLTIP_LABEL}\n        />\n        <Information\n          title=\"Minimum Received\"\n          description={`${minReceive.toSignificant(\n            6,\n          )} ${outputAsset.ticker.toUpperCase()}`}\n          tooltip={MIN_RECEIVED_LABEL}\n        />\n\n        <br />\n        <Information\n          title=\"Transaction Fee\"\n          description={inboundFee.toCurrencyFormat()}\n          tooltip={TX_FEE_TOOLTIP_LABEL}\n        />\n        <Information\n          title=\"Network Fee\"\n          description={outboundFee?.toCurrencyFormat() ?? ''}\n          tooltip=\"Estimated network fee used to pay outbound transaction\"\n        />\n        <Information\n          title=\"Total Fee\"\n          description={totalFeeInUSD?.toCurrencyFormat(2) ?? ''}\n          tooltip=\"Sum of both transaction fee and network fee\"\n        />\n      </Styled.SwapInfo>\n      {isApproved !== null && wallet && (\n        <Styled.ConfirmButtonContainer>\n          {!isApproved && (\n            <Styled.ApproveBtn\n              onClick={handleApprove}\n              error={!isValidSwap.valid}\n              disabled={\n                assetApproveStatus === TxTrackerStatus.Pending ||\n                assetApproveStatus === TxTrackerStatus.Submitting\n              }\n              loading={\n                assetApproveStatus === TxTrackerStatus.Pending ||\n                assetApproveStatus === TxTrackerStatus.Submitting\n              }\n            >\n              Approve\n            </Styled.ApproveBtn>\n          )}\n          <FancyButton\n            disabled={!isApproved}\n            onClick={handleSwap}\n            error={!isValidSwap.valid}\n          >\n            {btnLabel}\n          </FancyButton>\n        </Styled.ConfirmButtonContainer>\n      )}\n      {!wallet && (\n        <Styled.ConfirmButtonContainer>\n          <FancyButton onClick={handleSwap} error={!isValidSwap.valid}>\n            {btnLabel}\n          </FancyButton>\n        </Styled.ConfirmButtonContainer>\n      )}\n      <ConfirmModal\n        visible={visibleConfirmModal}\n        onOk={handleConfirm}\n        onCancel={handleCancel}\n        inputAssets={[inputAsset]}\n      >\n        {renderConfirmModalContent}\n      </ConfirmModal>\n      <ConfirmModal\n        visible={visibleApproveModal}\n        onOk={handleConfirmApprove}\n        onCancel={() => setVisibleApproveModal(false)}\n        inputAssets={[inputAsset]}\n      >\n        {renderApproveModal}\n      </ConfirmModal>\n    </PanelView>\n  )\n}\n\nexport default SwapView\n","import { useEffect, useState, useMemo } from 'react'\n\nimport { Asset, hasConnectedWallet } from 'multichain-sdk'\n\nimport { useMidgard } from 'redux/midgard/hooks'\nimport { TxTrackerStatus } from 'redux/midgard/types'\nimport { useWallet } from 'redux/wallet/hooks'\n\nimport { multichain } from 'services/multichain'\n\nexport const useApprove = (asset: Asset, hasWallet = true) => {\n  const { approveStatus } = useMidgard()\n  const { wallet } = useWallet()\n  const [isApproved, setApproved] = useState<boolean | null>(\n    hasWallet ? null : true,\n  )\n\n  const isWalletConnected = useMemo(() => hasConnectedWallet(wallet), [wallet])\n\n  useEffect(() => {\n    if (!hasWallet || !isWalletConnected) {\n      setApproved(true)\n      return\n    }\n\n    const checkApproved = async () => {\n      if (approveStatus?.[asset.toString()] === TxTrackerStatus.Success) {\n        setApproved(true)\n      }\n      const approved = await multichain.isAssetApproved(asset)\n      setApproved(approved)\n    }\n\n    checkApproved()\n  }, [asset, approveStatus, hasWallet, isWalletConnected])\n\n  const assetApproveStatus = useMemo(() => approveStatus?.[asset.toString()], [\n    approveStatus,\n    asset,\n  ])\n\n  return {\n    assetApproveStatus,\n    isApproved,\n  }\n}\n","import Swap from './Swap'\n\nexport default Swap\n"],"sourceRoot":""}