{"version":3,"sources":["views/Pools/Pools.style.ts","views/Pools/Pools.tsx","views/Pools/index.ts"],"names":["Container","styled","ContentView","palette","PoolTableView","div","ActionContainer","Table","UnstyledTable","CenterAlign","SymbolData","Home","history","useHistory","dispatch","useDispatch","runeToCurrency","useGlobalState","useMidgard","actions","pools","poolLoading","useState","selectedPoolStatus","setSelectedPoolStatus","keyword","setKeyword","handleLoadPoolData","useCallback","getPools","handleSelectPoolStatus","status","handleChangeKeyword","e","target","value","centerAlign","rightAlign","poolActions","useMemo","key","align","responsive","title","onClick","typevalue","round","fixedWidth","SyncOutlined","render","_","pool","swapRouter","getSwapRoute","asset","Asset","RUNE","liquidityRouter","getAddLiquidityRoute","detail","to","stopPropagation","style","marginRight","SwapOutlined","poolColumns","ticker","size","color","type","sortDirections","sorter","a","b","sortsBefore","chainToString","chain","localeCompare","Amount","fromAssetAmount","assetPriceUSD","toFixed","fromMidgard","runeDepth","mul","toCurrencyFormat","defaultSortOrder","volume24h","Percent","poolAPY","filteredPools","poolsByStatus","filter","poolStr","toString","toLowerCase","chainStr","assetType","keywordStr","includes","renderPoolview","columns","dataSource","loading","onRow","record","push","getPoolDetailRoute","rowKey","content","selected","prefix","SearchOutlined","sizevalue","placeholder","onChange","Pools"],"mappings":"4RAIaA,EAAYC,YAAOC,cAAPD,CAAH,qEACNE,kBAAQ,aAAc,IAGzBC,EAAgBH,IAAOI,IAAV,8FAMbC,EAAkBL,IAAOI,IAAV,kGAUfE,GAJUN,IAAOI,IAAV,oDAICJ,YAAOO,QAAPP,CAAH,4EAMLQ,EAAcR,IAAOI,IAAV,kGAMXK,EAAaT,IAAOI,IAAV,8G,OC+NRM,EAlOF,WACX,IAAMC,EAAUC,cACVC,EAAWC,cACTC,EAAmBC,cAAnBD,eAHS,EAIuBE,cAAhCC,EAJS,EAITA,QAASC,EAJA,EAIAA,MAAOC,EAJP,EAIOA,YAJP,EAMmCC,mBAClD,aAPe,mBAMVC,EANU,KAMUC,EANV,OAUaF,mBAAS,IAVtB,mBAUVG,EAVU,KAUDC,EAVC,KAYXC,EAAqBC,uBAAY,WACrCd,EAASK,EAAQU,cAChB,CAACf,EAAUK,IAERW,EAAyBF,uBAAY,SAACG,GAC1CP,EAAsBO,KACrB,IAEGC,EAAsBJ,uBAC1B,SAACK,GACCP,EAAWO,EAAEC,OAAOC,SAEtB,IAGIC,EAAc,SACdC,EAAa,QAEbC,EAAcC,mBAClB,iBAAO,CACLC,IAAK,SACLC,MAAOL,EACPM,WAAY,CAAC,MACbC,MACE,cAAC,EAAD,UACE,eAAC,SAAD,CACEC,QAASjB,EACTkB,UAAU,UACVC,OAAK,EACLC,YAAY,EAJd,UAME,cAACC,EAAA,EAAD,IANF,eAWJC,OAAQ,SAACC,EAAWC,GAClB,IAAMC,EAAaC,YAAaF,EAAKG,MAAOC,QAAMC,QAC5CC,EAAkBC,YAAqBP,EAAKG,OAElD,OACE,eAAC,EAAD,WAC0B,cAAvBH,EAAKQ,OAAO5B,QACX,cAAC,IAAD,CAAM6B,GAAIR,EAAYR,QAAS,SAACX,GAAD,OAAOA,EAAE4B,mBAAxC,SACE,eAAC,SAAD,CAAQf,OAAK,EAACgB,MAAO,CAAEC,YAAa,OAApC,UACE,cAACC,EAAA,EAAD,IADF,YAMJ,cAAC,IAAD,CAAMJ,GAAIH,EAAiBb,QAAS,SAACX,GAAD,OAAOA,EAAE4B,mBAA7C,SACE,cAAC,SAAD,CAAQf,OAAK,EAAb,gCAMV,CAACnB,IAGGsC,EAAkC1B,mBACtC,iBAAM,CACJ,CACEC,IAAK,OACLG,MAAO,OACPM,OAAQ,SAACE,GAAD,OACN,eAAC,EAAD,WACE,cAAC,YAAD,CAAWG,MAAOH,EAAKG,QACvB,eAAC,EAAD,WACE,cAAC,QAAD,UAAQH,EAAKG,MAAMY,SACnB,cAAC,QAAD,CAAOC,KAAK,QAAQC,MAAM,OAA1B,SACGjB,EAAKG,MAAMe,cAKpB5B,MAAOL,EACPkC,eAAgB,CAAC,UAAW,UAC5BC,OAAQ,SAACC,EAASC,GAAV,OAAsBD,EAAElB,MAAMoB,YAAYD,EAAEnB,SAEtD,CACEd,IAAK,QACLG,MAAO,UACPF,MAAOL,EACPM,WAAY,CAAC,MACbO,OAAQ,SAACE,GAAD,OAAgBwB,YAAcxB,EAAKG,MAAMsB,QACjDN,eAAgB,CAAC,UAAW,UAC5BC,OAAQ,SAACC,EAASC,GAAV,OACNE,YAAcH,EAAElB,MAAMsB,OAAOC,cAC3BF,YAAcF,EAAEnB,MAAMsB,UAG5B,CACEpC,IAAK,QACLG,MAAO,YACPM,OAAQ,SAACE,GAAD,iBACF2B,SAAOC,gBAAgB5B,EAAKQ,OAAOqB,cAAe,GAAGC,QAAQ,KACnExC,MAAOJ,EACPiC,eAAgB,CAAC,UAAW,UAC5BC,OAAQ,SAACC,EAASC,GAAV,OACNK,SAAOP,OACLO,SAAOC,gBAAgBP,EAAEb,OAAOqB,cAAe,GAC/CF,SAAOC,gBAAgBN,EAAEd,OAAOqB,cAAe,MAGrD,CACExC,IAAK,YACLG,MAAO,YACPM,OAAQ,SAACE,GAAD,OACNnC,EACE8D,SAAOI,YAAY/B,EAAKQ,OAAOwB,WAAWC,IAAI,IAC9CC,iBAAiB,IACrB5C,MAAOJ,EACPiC,eAAgB,CAAC,UAAW,UAC5BgB,iBAAkB,UAClBf,OAAQ,SAACC,EAASC,GAAV,OACNK,SAAOP,OACLO,SAAOI,YAAYV,EAAEb,OAAOwB,WAC5BL,SAAOI,YAAYT,EAAEd,OAAOwB,cAGlC,CACE3C,IAAK,YACLG,MAAO,aACPD,WAAY,CAAC,MACbO,OAAQ,SAACE,GAAD,OACNnC,EACE8D,SAAOI,YAAY/B,EAAKQ,OAAO4B,YAC/BF,iBAAiB,IACrB5C,MAAOJ,EACPiC,eAAgB,CAAC,UAAW,UAC5BC,OAAQ,SAACC,EAASC,GAAV,OACNK,SAAOP,OACLO,SAAOI,YAAYV,EAAEb,OAAO4B,WAC5BT,SAAOI,YAAYT,EAAEd,OAAO4B,cAGlC,CACE/C,IAAK,MACLG,MAAO,MACPD,WAAY,CAAC,MACbO,OAAQ,SAACE,GAAD,gBACH,IAAIqC,UAAQrC,EAAKQ,OAAO8B,SAASR,QAAQ,KAC9CxC,MAAOJ,EACPiC,eAAgB,CAAC,UAAW,UAC5BC,OAAQ,SAACC,EAASC,GAAV,OACNK,SAAOP,OACLiB,UAAQN,YAAYV,EAAEb,OAAO8B,SAC7BD,UAAQN,YAAYT,EAAEd,OAAO8B,YAGnCnD,KAEF,CAACA,EAAatB,IAGV0E,EAAgBnD,mBAAQ,WAC5B,IAAMoD,EAAgBvE,EAAMwE,QAC1B,SAACzC,GAAD,OAAUA,EAAKQ,OAAO5B,SAAWR,KAEnC,OAAIE,EACKkE,EAAcC,QAAO,SAACzC,GAC3B,IAAM0C,EAAU1C,EAAKG,MAAMwC,WAAWC,cAChCC,EAAWrB,YAAcxB,EAAKG,MAAMsB,OAAOmB,cAC3CE,EAAY9C,EAAKG,MAAMe,KAAK0B,cAC5BG,EAAazE,EAAQsE,cAE3B,OACEF,EAAQM,SAASD,IACjBF,EAASG,SAASD,IAClBD,EAAUE,SAASD,MAKlBP,IACN,CAACvE,EAAOK,EAASF,IAEd6E,EAAiB7D,mBACrB,kBACE,cAAC,EAAD,CACE8D,QAASpC,EACTqC,WAAYZ,EACZa,QAASlF,EACTmF,MAAO,SAACC,GAAD,MAAmB,CACxB7D,QAAS,kBAAMhC,EAAQ8F,KAAKC,YAAmBF,OAEjDG,OAAO,UAGX,CAAC3C,EAAayB,EAAerE,EAAaT,IAG5C,OACE,eAAC,EAAD,WACE,cAAC,SAAD,CAAQ+B,MAAM,iBAAiBkE,QAAQ,mBACvC,cAAC,mBAAD,CACEC,SAAUvF,EACVqB,QAASd,IAEX,eAAC,EAAD,WACE,cAAC,QAAD,CACEiF,OAAQ,cAACC,EAAA,EAAD,IACRC,UAAU,MACVC,YAAY,0CACZ/E,MAAOV,EACP0F,SAAUnF,IAEXoE,SC3PMgB","file":"static/js/16.3e5aed61.chunk.js","sourcesContent":["import { ContentView, Table as UnstyledTable } from 'components'\nimport styled from 'styled-components'\nimport { palette } from 'styled-theme'\n\nexport const Container = styled(ContentView)`\n  background: ${palette('background', 3)};\n  margin-top: -20px;\n`\nexport const PoolTableView = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-top: 10px;\n`\n\nexport const ActionContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nexport const Section = styled.div`\n  margin-bottom: 20px;\n`\n\nexport const Table = styled(UnstyledTable)`\n  .ant-table-row {\n    cursor: pointer;\n  }\n`\n\nexport const CenterAlign = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nexport const SymbolData = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-left: 8px;\n  width: 50px;\n`\n","import React, { useState, useCallback, useMemo } from 'react'\n\nimport { useDispatch } from 'react-redux'\nimport { useHistory } from 'react-router'\nimport { Link } from 'react-router-dom'\n\nimport { SyncOutlined, SwapOutlined, SearchOutlined } from '@ant-design/icons'\nimport { chainToString } from '@xchainjs/xchain-util'\nimport { Breakpoint } from 'antd/lib/_util/responsiveObserve'\nimport { ColumnType } from 'antd/lib/table'\nimport {\n  AssetIcon,\n  Helmet,\n  PoolStatusFilter,\n  Button,\n  Input,\n  Label,\n} from 'components'\nimport { PoolStatus } from 'midgard-sdk'\nimport { Amount, Asset, Percent, Pool } from 'multichain-sdk'\nimport { AlignType } from 'rc-table/lib/interface'\n\nimport { useGlobalState } from 'redux/hooks'\nimport { useMidgard } from 'redux/midgard/hooks'\n\nimport {\n  getSwapRoute,\n  getPoolDetailRoute,\n  getAddLiquidityRoute,\n} from 'settings/constants'\n\nimport * as Styled from './Pools.style'\n\nconst Home = () => {\n  const history = useHistory()\n  const dispatch = useDispatch()\n  const { runeToCurrency } = useGlobalState()\n  const { actions, pools, poolLoading } = useMidgard()\n\n  const [selectedPoolStatus, setSelectedPoolStatus] = useState<PoolStatus>(\n    'available',\n  )\n\n  const [keyword, setKeyword] = useState('')\n\n  const handleLoadPoolData = useCallback(() => {\n    dispatch(actions.getPools())\n  }, [dispatch, actions])\n\n  const handleSelectPoolStatus = useCallback((status: PoolStatus) => {\n    setSelectedPoolStatus(status)\n  }, [])\n\n  const handleChangeKeyword = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      setKeyword(e.target.value)\n    },\n    [],\n  )\n\n  const centerAlign = 'center' as AlignType\n  const rightAlign = 'right' as AlignType\n\n  const poolActions = useMemo(\n    () => ({\n      key: 'action',\n      align: centerAlign,\n      responsive: ['md'] as Breakpoint[],\n      title: (\n        <Styled.ActionContainer>\n          <Button\n            onClick={handleLoadPoolData}\n            typevalue=\"outline\"\n            round\n            fixedWidth={false}\n          >\n            <SyncOutlined />\n            refresh\n          </Button>\n        </Styled.ActionContainer>\n      ),\n      render: (_: string, pool: Pool) => {\n        const swapRouter = getSwapRoute(pool.asset, Asset.RUNE())\n        const liquidityRouter = getAddLiquidityRoute(pool.asset)\n\n        return (\n          <Styled.ActionContainer>\n            {pool.detail.status === 'available' && (\n              <Link to={swapRouter} onClick={(e) => e.stopPropagation()}>\n                <Button round style={{ marginRight: '8px' }}>\n                  <SwapOutlined />\n                  SWAP\n                </Button>\n              </Link>\n            )}\n            <Link to={liquidityRouter} onClick={(e) => e.stopPropagation()}>\n              <Button round>Liquidity</Button>\n            </Link>\n          </Styled.ActionContainer>\n        )\n      },\n    }),\n    [handleLoadPoolData],\n  )\n\n  const poolColumns: ColumnType<Pool>[] = useMemo(\n    () => [\n      {\n        key: 'Pool',\n        title: 'Pool',\n        render: (pool: Pool) => (\n          <Styled.CenterAlign>\n            <AssetIcon asset={pool.asset} />\n            <Styled.SymbolData>\n              <Label>{pool.asset.ticker}</Label>\n              <Label size=\"small\" color=\"gray\">\n                {pool.asset.type}\n              </Label>\n            </Styled.SymbolData>\n          </Styled.CenterAlign>\n        ),\n        align: centerAlign,\n        sortDirections: ['descend', 'ascend'],\n        sorter: (a: Pool, b: Pool) => a.asset.sortsBefore(b.asset),\n      },\n      {\n        key: 'Chain',\n        title: 'Network',\n        align: centerAlign,\n        responsive: ['md'] as Breakpoint[],\n        render: (pool: Pool) => chainToString(pool.asset.chain),\n        sortDirections: ['descend', 'ascend'],\n        sorter: (a: Pool, b: Pool) =>\n          chainToString(a.asset.chain).localeCompare(\n            chainToString(b.asset.chain),\n          ),\n      },\n      {\n        key: 'Price',\n        title: 'USD Price',\n        render: (pool: Pool) =>\n          `$${Amount.fromAssetAmount(pool.detail.assetPriceUSD, 8).toFixed(3)}`,\n        align: rightAlign,\n        sortDirections: ['descend', 'ascend'],\n        sorter: (a: Pool, b: Pool) =>\n          Amount.sorter(\n            Amount.fromAssetAmount(a.detail.assetPriceUSD, 8),\n            Amount.fromAssetAmount(b.detail.assetPriceUSD, 8),\n          ),\n      },\n      {\n        key: 'Liquidity',\n        title: 'Liquidity',\n        render: (pool: Pool) =>\n          runeToCurrency(\n            Amount.fromMidgard(pool.detail.runeDepth).mul(2),\n          ).toCurrencyFormat(2),\n        align: rightAlign,\n        sortDirections: ['descend', 'ascend'],\n        defaultSortOrder: 'descend',\n        sorter: (a: Pool, b: Pool) =>\n          Amount.sorter(\n            Amount.fromMidgard(a.detail.runeDepth),\n            Amount.fromMidgard(b.detail.runeDepth),\n          ),\n      },\n      {\n        key: 'Volume24h',\n        title: '24H Volume',\n        responsive: ['md'] as Breakpoint[],\n        render: (pool: Pool) =>\n          runeToCurrency(\n            Amount.fromMidgard(pool.detail.volume24h),\n          ).toCurrencyFormat(2),\n        align: rightAlign,\n        sortDirections: ['descend', 'ascend'],\n        sorter: (a: Pool, b: Pool) =>\n          Amount.sorter(\n            Amount.fromMidgard(a.detail.volume24h),\n            Amount.fromMidgard(b.detail.volume24h),\n          ),\n      },\n      {\n        key: 'APY',\n        title: 'APY',\n        responsive: ['md'] as Breakpoint[],\n        render: (pool: Pool) =>\n          `${new Percent(pool.detail.poolAPY).toFixed(0)}`,\n        align: rightAlign,\n        sortDirections: ['descend', 'ascend'],\n        sorter: (a: Pool, b: Pool) =>\n          Amount.sorter(\n            Percent.fromMidgard(a.detail.poolAPY),\n            Percent.fromMidgard(b.detail.poolAPY),\n          ),\n      },\n      poolActions,\n    ],\n    [poolActions, runeToCurrency],\n  )\n\n  const filteredPools = useMemo(() => {\n    const poolsByStatus = pools.filter(\n      (pool) => pool.detail.status === selectedPoolStatus,\n    )\n    if (keyword) {\n      return poolsByStatus.filter((pool) => {\n        const poolStr = pool.asset.toString().toLowerCase()\n        const chainStr = chainToString(pool.asset.chain).toLowerCase()\n        const assetType = pool.asset.type.toLowerCase()\n        const keywordStr = keyword.toLowerCase()\n\n        return (\n          poolStr.includes(keywordStr) ||\n          chainStr.includes(keywordStr) ||\n          assetType.includes(keywordStr)\n        )\n      })\n    }\n\n    return poolsByStatus\n  }, [pools, keyword, selectedPoolStatus])\n\n  const renderPoolview = useMemo(\n    () => (\n      <Styled.Table\n        columns={poolColumns}\n        dataSource={filteredPools}\n        loading={poolLoading}\n        onRow={(record: Pool) => ({\n          onClick: () => history.push(getPoolDetailRoute(record)),\n        })}\n        rowKey=\"key\"\n      />\n    ),\n    [poolColumns, filteredPools, poolLoading, history],\n  )\n\n  return (\n    <Styled.Container>\n      <Helmet title=\"Pools Overview\" content=\"Pools Overview\" />\n      <PoolStatusFilter\n        selected={selectedPoolStatus}\n        onClick={handleSelectPoolStatus}\n      />\n      <Styled.PoolTableView>\n        <Input\n          prefix={<SearchOutlined />}\n          sizevalue=\"big\"\n          placeholder=\"Search pool by name, network or type...\"\n          value={keyword}\n          onChange={handleChangeKeyword}\n        />\n        {renderPoolview}\n      </Styled.PoolTableView>\n    </Styled.Container>\n  )\n}\n\nexport default Home\n","import Pools from './Pools'\n\nexport default Pools\n"],"sourceRoot":""}