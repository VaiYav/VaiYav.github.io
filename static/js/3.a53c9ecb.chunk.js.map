{"version":3,"sources":["helpers/networkFee.ts","hooks/useNetworkFee.ts","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v4.js","hooks/useTxTracker.ts","hooks/useBalance.ts","views/Add/Add.style.ts","views/Add/Add.tsx","views/Add/utils.ts","views/Add/index.ts"],"names":["multiplier","average","fast","fastest","getGasRateByChain","inboundData","chain","chainInboundData","find","data","Number","gas_rate","getGasRateByFeeOption","feeOptionType","useNetworkFee","inputAsset","outputAsset","useApp","useMidgard","pools","inboundFee","useMemo","gasRate","NetworkFee","getNetworkFeeByAsset","asset","direction","outboundFee","totalFee","outboundFeeInSendAsset","AssetAmount","Amount","fromAssetAmount","totalPriceIn","price","decimal","eq","add","totalFeeInUSD","Asset","USD","getSumAmountInUSD","assetAmount1","assetAmount2","assetAmount1InUSD","assetAmount2InUSD","toCurrencyFormat","sum","raw","plus","toFixed","getRandomValues","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","validate","uuid","REGEX","test","byteToHex","i","push","toString","substr","stringify","arr","offset","arguments","length","undefined","toLowerCase","TypeError","v4","options","buf","rnds","random","useTxTracker","addNewTxTracker","updateTxTracker","clearTxTrackers","processSubmittedTx","submitTransaction","useCallback","type","submitTx","uuidv4","status","TxTrackerStatus","Submitting","action","refunded","pollTransaction","txTracker","Pending","setTxFailed","Failed","useBalance","dispatch","useDispatch","useSelector","state","app","wallet","midgard","reloadBalanceByChain","walletActions","reloadAllBalance","getMaxBalance","balance","getAssetBalance","amount","maxSpendableAmount","isGasAsset","sub","mul","gt","ToolContainer","styled","div","SliderWrapper","SwitchPair","palette","ConfirmButtonContainer","ConfirmModalContent","DetailContent","ApproveBtn","FancyButton","AddLiquidityPanel","pool","poolAsset","assetObj","history","useHistory","expertMode","getAllMemberDetails","memberDetails","isFundsCapReached","useMimir","inputAssets","getInputAssetsForAdd","useState","LiquidityTypeOption","SYMMETRICAL","liquidityType","setLiquidityType","isSymDeposit","assetAmount","setAssetAmount","runeAmount","setRuneAmount","percent","setPercent","visibleConfirmModal","setVisibleConfirmModal","visibleApproveModal","setVisibleApproveModal","isApproved","setApproved","inboundAssetFee","inboundRuneFee","RUNE","useEffect","poolMemberDetail","getMemberDetailByPool","liquidityUnits","fromMidgard","liquidityEntity","Liquidity","addLiquiditySlip","getLiquiditySlip","poolShareEst","getPoolShareEst","a","multichain","isAssetApproved","approved","checkApproved","poolAssetPriceInUSD","Price","baseAsset","priceAmount","runeAssetPriceInUSD","poolAssetBalance","maxPoolAssetBalance","runeBalance","maxRuneBalance","symAssetAmount","runePriceInAsset","maxSymAssetAmount","maxSymRuneAmount","assetPriceInRune","getMaxSymAmounts","handleSelectLiquidityType","ASSET","handleSelectPoolAsset","poolAssetData","getAddLiquidityRoute","handleChangeAssetAmount","maxAmount","toNumber","handleChangePercent","p","handleSelectMax","handleChangeRuneAmount","handleConfirmAdd","runeAssetAmount","poolAssetAmount","inAssets","toSignificant","trackId","TxTrackerType","AddLiquidity","outAssets","ticker","addLiquidity","txRes","runeTxHash","runeTx","assetTxHash","assetTx","txID","addTx","runeTxID","assetTxID","Notification","message","description","duration","console","log","handleCancel","handleConfirmApprove","approveAsset","txHash","txURL","getExplorerTxUrl","btn","href","target","rel","handleAddLiquidity","handleApprove","depositAssets","renderFee","hasRuneFee","hasAssetFee","title","tooltip","TX_FEE_TOOLTIP_LABEL","renderConfirmModalContent","toUpperCase","estimatedTime","getEstimatedTxTime","THORChain","SLIP_TOOLTIP_LABEL","ESTIMATED_POOL_SHARE_LABEL","ESTIMATED_TIME_LABEL","renderApproveModal","usdFee","minRuneAmount","getMinAmountByChain","minAssetAmount","isValidDeposit","valid","msg","isApproveRequired","meta","selected","onSelect","isAsymAvailable","detail","assets","onChange","onMax","usdPrice","inputProps","disabled","value","withLabel","PlusOutlined","selectDisabled","onClick","error","visible","onOk","onCancel","AddLiquidityView","useParams","setAssetObj","setPool","poolLoading","assetPool","Pool","byAsset","assetEntity","fromAssetString","isRUNE","setDecimal","getAssetEntity","Add"],"mappings":"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","file":"static/js/3.a53c9ecb.chunk.js","sourcesContent":["import { FeeOptionKey } from '@xchainjs/xchain-client'\nimport { Chain } from '@xchainjs/xchain-util'\nimport { InboundAddressesItem } from 'midgard-sdk'\n\nconst multiplier: Record<FeeOptionKey, number> = {\n  average: 0.67,\n  fast: 1,\n  fastest: 1.5,\n}\n\n// Reference issue: https://github.com/thorchain/asgardex-electron/issues/1381\nexport const getGasRateByChain = ({\n  inboundData,\n  chain,\n}: {\n  inboundData: InboundAddressesItem[]\n  chain: Chain\n}): number => {\n  const chainInboundData = inboundData.find((data) => data.chain === chain)\n\n  return Number(chainInboundData?.gas_rate ?? 0)\n}\n\nexport const getGasRateByFeeOption = ({\n  inboundData,\n  chain,\n  feeOptionType,\n}: {\n  inboundData: InboundAddressesItem[]\n  chain: Chain\n  feeOptionType: FeeOptionKey\n}) => {\n  return getGasRateByChain({ inboundData, chain }) * multiplier[feeOptionType]\n}\n","import { useMemo } from 'react'\n\nimport { Asset, Amount, AssetAmount, NetworkFee, Pool } from 'multichain-sdk'\n\nimport { useApp } from 'redux/app/hooks'\nimport { useMidgard } from 'redux/midgard/hooks'\n\nimport { getGasRateByChain, getGasRateByFeeOption } from 'helpers/networkFee'\n\nexport const useNetworkFee = ({\n  inputAsset,\n  outputAsset,\n}: {\n  inputAsset: Asset\n  outputAsset?: Asset\n}) => {\n  const { feeOptionType } = useApp()\n  const { inboundData, pools } = useMidgard()\n\n  const inboundFee = useMemo(() => {\n    // get inbound gasRate with fee option\n    const gasRate = getGasRateByFeeOption({\n      inboundData,\n      chain: inputAsset.chain,\n      feeOptionType,\n    })\n    const networkFee = NetworkFee.getNetworkFeeByAsset({\n      asset: inputAsset,\n      gasRate,\n      direction: 'inbound',\n    })\n\n    return networkFee\n  }, [inputAsset, inboundData, feeOptionType])\n\n  const outboundFee = useMemo(() => {\n    if (!outputAsset) return null\n\n    const gasRate = getGasRateByChain({ inboundData, chain: outputAsset.chain })\n    const networkFee = NetworkFee.getNetworkFeeByAsset({\n      asset: outputAsset,\n      gasRate,\n      direction: 'outbound',\n    })\n\n    return networkFee\n  }, [outputAsset, inboundData])\n\n  const totalFee = useMemo(() => {\n    if (!outboundFee) return inboundFee\n\n    const outboundFeeInSendAsset = new AssetAmount(\n      inputAsset,\n      Amount.fromAssetAmount(\n        outboundFee.totalPriceIn(inputAsset, pools).price,\n        inputAsset.decimal,\n      ),\n    )\n\n    if (inboundFee.asset.eq(inputAsset)) {\n      return inboundFee.add(outboundFeeInSendAsset)\n    }\n\n    const inboundFeeInSendAsset = new AssetAmount(\n      inputAsset,\n      Amount.fromAssetAmount(\n        inboundFee.totalPriceIn(inputAsset, pools).price,\n        inputAsset.decimal,\n      ),\n    )\n    return inboundFeeInSendAsset.add(outboundFeeInSendAsset)\n  }, [inputAsset, inboundFee, outboundFee, pools])\n\n  const totalFeeInUSD = useMemo(\n    () => totalFee.totalPriceIn(Asset.USD(), pools),\n    [totalFee, pools],\n  )\n\n  return {\n    totalFee,\n    inboundFee,\n    outboundFee,\n    totalFeeInUSD,\n  }\n}\n\nexport const getSumAmountInUSD = (\n  assetAmount1: AssetAmount | null,\n  assetAmount2: AssetAmount | null,\n  pools: Pool[],\n) => {\n  const assetAmount1InUSD = assetAmount1?.totalPriceIn(Asset.USD(), pools)\n  const assetAmount2InUSD = assetAmount2?.totalPriceIn(Asset.USD(), pools)\n\n  if (assetAmount1 === null && assetAmount2InUSD)\n    return assetAmount2InUSD.toCurrencyFormat()\n  if (assetAmount2 === null && assetAmount1InUSD)\n    return assetAmount1InUSD.toCurrencyFormat()\n\n  if (assetAmount1InUSD && assetAmount2InUSD) {\n    const sum = assetAmount1InUSD.raw().plus(assetAmount2InUSD.raw())\n\n    return Amount.fromAssetAmount(sum, 8).toFixed(2)\n  }\n\n  return Amount.fromAssetAmount(0, 8).toFixed()\n}\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","import { useCallback } from 'react'\n\nimport { v4 as uuidv4 } from 'uuid'\n\nimport { useMidgard } from 'redux/midgard/hooks'\nimport { TxTrackerStatus, SubmitTx, TxTrackerType } from 'redux/midgard/types'\n\n/**\n * 1. send transaction and get txHash\n * 2. poll midgard action API and get \"in\" tx with the same txHash\n * 3. check action status (success, pending)\n * 4. check action type and match with send tx type\n *    (if action type is not \"refund\", action type should be matched to the send type)\n */\n\nexport const useTxTracker = () => {\n  const {\n    addNewTxTracker,\n    updateTxTracker,\n    clearTxTrackers,\n    processSubmittedTx,\n  } = useMidgard()\n\n  // confirm and submit a transaction\n  const submitTransaction = useCallback(\n    ({\n      type,\n      submitTx,\n    }: {\n      type: TxTrackerType\n      submitTx: SubmitTx\n    }): string => {\n      const uuid = uuidv4()\n\n      addNewTxTracker({\n        uuid,\n        type,\n        status: TxTrackerStatus.Submitting,\n        submitTx,\n        action: null,\n        refunded: null,\n      })\n\n      return uuid\n    },\n    [addNewTxTracker],\n  )\n\n  // start polling a transaction\n  const pollTransaction = useCallback(\n    ({\n      uuid,\n      submitTx,\n      type,\n    }: {\n      uuid: string\n      submitTx: SubmitTx\n      type: TxTrackerType\n    }) => {\n      updateTxTracker({\n        uuid,\n        txTracker: {\n          status: TxTrackerStatus.Pending,\n          submitTx,\n        },\n      })\n      processSubmittedTx({ submitTx, type })\n    },\n    [updateTxTracker, processSubmittedTx],\n  )\n\n  // start polling a transaction\n  const setTxFailed = useCallback(\n    (uuid: string) => {\n      updateTxTracker({\n        uuid,\n        txTracker: {\n          status: TxTrackerStatus.Failed,\n        },\n      })\n    },\n    [updateTxTracker],\n  )\n\n  return {\n    submitTransaction,\n    pollTransaction,\n    clearTxTrackers,\n    setTxFailed,\n  }\n}\n","import { useCallback } from 'react'\n\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { Asset, Amount, getAssetBalance, NetworkFee } from 'multichain-sdk'\n\nimport { SupportedChain } from 'multichain-sdk/clients/types'\n\nimport { RootState } from 'redux/store'\nimport * as walletActions from 'redux/wallet/actions'\n\nimport { getGasRateByFeeOption } from 'helpers/networkFee'\n\nexport const useBalance = () => {\n  const dispatch = useDispatch()\n  const { feeOptionType } = useSelector((state: RootState) => state.app)\n  const { wallet } = useSelector((state: RootState) => state.wallet)\n  const { inboundData } = useSelector((state: RootState) => state.midgard)\n\n  const reloadBalanceByChain = useCallback(\n    (chain: SupportedChain) => {\n      dispatch(walletActions.getWalletByChain(chain))\n    },\n    [dispatch],\n  )\n\n  const reloadAllBalance = useCallback(() => {\n    dispatch(walletActions.loadAllWallets())\n  }, [dispatch])\n\n  const getMaxBalance = useCallback(\n    (asset: Asset): Amount => {\n      if (!wallet?.[asset.chain as SupportedChain]) {\n        // allow max amount for emulation if wallet is not connected\n        return Amount.fromAssetAmount(10 ** 8, 8)\n      }\n\n      // calculate inbound fee\n      const gasRate = getGasRateByFeeOption({\n        inboundData,\n        chain: asset.chain,\n        feeOptionType,\n      })\n      const inboundFee = NetworkFee.getNetworkFeeByAsset({\n        asset,\n        gasRate,\n        direction: 'inbound',\n      })\n\n      const balance = getAssetBalance(asset, wallet).amount\n\n      /**\n       * if asset is used for gas, subtract the inbound gas fee from input amount\n       * else allow full amount\n       * Calc: max spendable amount = balance amount - 2 x gas fee(if send asset equals to gas asset)\n       */\n\n      const maxSpendableAmount = asset.isGasAsset()\n        ? balance.sub(inboundFee.mul(1.5).amount)\n        : balance\n\n      if (maxSpendableAmount.gt(0)) {\n        return maxSpendableAmount\n      }\n\n      return Amount.fromAssetAmount(0, asset.decimal)\n    },\n    [wallet, feeOptionType, inboundData],\n  )\n\n  return {\n    getMaxBalance,\n    reloadAllBalance,\n    reloadBalanceByChain,\n    wallet,\n  }\n}\n","import { FancyButton } from 'components'\nimport styled from 'styled-components/macro'\nimport { palette } from 'styled-theme'\n\nexport const ToolContainer = styled.div`\n  display: flex;\n\n  height: 60px;\n`\n\nexport const SliderWrapper = styled.div`\n  width: 260px;\n`\n\nexport const SwitchPair = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex: 1;\n\n  svg {\n    width: 24px;\n    height: 24px;\n    color: ${palette('primary', 0)};\n    transform: rotate(90deg);\n  }\n`\n\nexport const ConfirmButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  padding: 0 2%;\n\n  margin-top: 14px;\n\n  button {\n    flex: 1;\n  }\n`\n\nexport const ConfirmModalContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n`\n\nexport const DetailContent = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  width: 100%;\n  padding: 8px;\n  margin-top: 14px;\n\n  border: 1px solid ${palette('gray', 0)};\n`\n\nexport const ApproveBtn = styled(FancyButton)`\n  margin-right: 8px;\n`\n","import React, { useEffect, useMemo, useState, useCallback } from 'react'\n\nimport { useHistory, useParams } from 'react-router'\n\nimport { PlusOutlined } from '@ant-design/icons'\nimport { THORChain } from '@xchainjs/xchain-thorchain'\nimport {\n  PanelView,\n  AssetInputCard,\n  Slider,\n  ConfirmModal,\n  Information,\n  Notification,\n  FancyButton,\n  LiquidityTypeOption,\n  LiquidityType,\n} from 'components'\nimport { MemberPool } from 'midgard-sdk'\nimport {\n  getInputAssetsForAdd,\n  Amount,\n  Asset,\n  getAssetBalance,\n  Pool,\n  Price,\n  Liquidity,\n  getMemberDetailByPool,\n  AssetAmount,\n  Percent,\n  getEstimatedTxTime,\n  SupportedChain,\n} from 'multichain-sdk'\n\nimport { useApp } from 'redux/app/hooks'\nimport { useMidgard } from 'redux/midgard/hooks'\nimport { TxTrackerType } from 'redux/midgard/types'\n\nimport { useBalance } from 'hooks/useBalance'\nimport { useMimir } from 'hooks/useMimir'\nimport { useNetworkFee, getSumAmountInUSD } from 'hooks/useNetworkFee'\nimport { useTxTracker } from 'hooks/useTxTracker'\n\nimport { multichain } from 'services/multichain'\n\nimport { getAddLiquidityRoute } from 'settings/constants'\nimport {\n  TX_FEE_TOOLTIP_LABEL,\n  SLIP_TOOLTIP_LABEL,\n  ESTIMATED_TIME_LABEL,\n  ESTIMATED_POOL_SHARE_LABEL,\n} from 'settings/constants/label'\n\nimport * as Styled from './Add.style'\nimport { getMaxSymAmounts } from './utils'\n\nconst AddLiquidityView = () => {\n  const { asset } = useParams<{ asset: string }>()\n  const [assetObj, setAssetObj] = useState<Asset>()\n  const [pool, setPool] = useState<Pool>()\n\n  const { pools, poolLoading } = useMidgard()\n\n  useEffect(() => {\n    if (!poolLoading && pools.length && assetObj) {\n      const assetPool = Pool.byAsset(assetObj, pools)\n\n      if (assetPool) {\n        setPool(assetPool)\n      }\n    }\n  }, [pools, poolLoading, assetObj])\n\n  useEffect(() => {\n    const getAssetEntity = async () => {\n      if (!asset) {\n        return\n      }\n      const assetEntity = Asset.fromAssetString(asset)\n\n      if (assetEntity) {\n        if (assetEntity.isRUNE()) return\n\n        await assetEntity.setDecimal()\n\n        setAssetObj(assetEntity)\n      }\n    }\n\n    getAssetEntity()\n  }, [asset])\n\n  if (pool && pools.length && assetObj) {\n    return <AddLiquidityPanel assetObj={assetObj} pool={pool} pools={pools} />\n  }\n\n  return null\n}\n\nconst AddLiquidityPanel = ({\n  pool,\n  pools,\n  assetObj: poolAsset,\n}: {\n  assetObj: Asset\n  pool: Pool\n  pools: Pool[]\n}) => {\n  const history = useHistory()\n  const { expertMode } = useApp()\n  const { wallet, getMaxBalance } = useBalance()\n  const { getAllMemberDetails, memberDetails } = useMidgard()\n  const { submitTransaction, pollTransaction, setTxFailed } = useTxTracker()\n\n  const { isFundsCapReached } = useMimir()\n\n  const inputAssets = useMemo(() => getInputAssetsForAdd({ wallet, pools }), [\n    wallet,\n    pools,\n  ])\n\n  const [liquidityType, setLiquidityType] = useState(\n    LiquidityTypeOption.SYMMETRICAL,\n  )\n  const isSymDeposit = useMemo(\n    () =>\n      liquidityType === LiquidityTypeOption.SYMMETRICAL && expertMode === 'off',\n    [liquidityType, expertMode],\n  )\n\n  const [assetAmount, setAssetAmount] = useState<Amount>(\n    Amount.fromAssetAmount(0, 8),\n  )\n  const [runeAmount, setRuneAmount] = useState<Amount>(\n    Amount.fromAssetAmount(0, 8),\n  )\n  const [percent, setPercent] = useState(0)\n  const [visibleConfirmModal, setVisibleConfirmModal] = useState(false)\n  const [visibleApproveModal, setVisibleApproveModal] = useState(false)\n\n  const [isApproved, setApproved] = useState<boolean | null>(null)\n\n  const { inboundFee: inboundAssetFee } = useNetworkFee({\n    inputAsset: pool.asset,\n  })\n\n  const { inboundFee: inboundRuneFee } = useNetworkFee({\n    inputAsset: Asset.RUNE(),\n  })\n\n  useEffect(() => {\n    getAllMemberDetails()\n  }, [getAllMemberDetails])\n\n  const poolMemberDetail: MemberPool | undefined = useMemo(() => {\n    return getMemberDetailByPool({ memberDetails, pool })\n  }, [memberDetails, pool])\n\n  const liquidityUnits = useMemo(() => {\n    if (!poolMemberDetail) return Amount.fromMidgard(0)\n\n    return Amount.fromMidgard(poolMemberDetail.liquidityUnits)\n  }, [poolMemberDetail])\n  const liquidityEntity = useMemo(() => {\n    return new Liquidity(pool, liquidityUnits)\n  }, [pool, liquidityUnits])\n\n  const addLiquiditySlip = useMemo(() => {\n    return (liquidityEntity.getLiquiditySlip(\n      runeAmount,\n      assetAmount,\n    ) as Percent).toFixed(2)\n  }, [liquidityEntity, assetAmount, runeAmount])\n\n  const poolShareEst = useMemo(() => {\n    return liquidityEntity.getPoolShareEst(runeAmount, assetAmount).toFixed(3)\n  }, [liquidityEntity, assetAmount, runeAmount])\n\n  useEffect(() => {\n    const checkApproved = async () => {\n      const approved = await multichain.isAssetApproved(poolAsset)\n      setApproved(approved)\n    }\n\n    if (wallet) {\n      checkApproved()\n    }\n  }, [poolAsset, wallet])\n\n  const poolAssetPriceInUSD = useMemo(\n    () =>\n      new Price({\n        baseAsset: poolAsset,\n        pools,\n        priceAmount: assetAmount,\n      }),\n    [poolAsset, assetAmount, pools],\n  )\n\n  const runeAssetPriceInUSD = useMemo(\n    () =>\n      new Price({\n        baseAsset: Asset.RUNE(),\n        pools,\n        priceAmount: runeAmount,\n      }),\n    [runeAmount, pools],\n  )\n\n  const poolAssetBalance: Amount = useMemo(() => {\n    if (wallet) {\n      return getAssetBalance(poolAsset, wallet).amount\n    }\n\n    // allow max amount if wallet is not connected\n    return Amount.fromAssetAmount(10 ** 3, 8)\n  }, [poolAsset, wallet])\n\n  const maxPoolAssetBalance: Amount = useMemo(() => getMaxBalance(poolAsset), [\n    poolAsset,\n    getMaxBalance,\n  ])\n\n  const runeBalance: Amount = useMemo(() => {\n    if (wallet) {\n      return getAssetBalance(Asset.RUNE(), wallet).amount\n    }\n\n    // allow max amount if wallet is not connected\n    return Amount.fromAssetAmount(10 ** 3, 8)\n  }, [wallet])\n\n  const maxRuneBalance: Amount = useMemo(() => getMaxBalance(Asset.RUNE()), [\n    getMaxBalance,\n  ])\n\n  const { maxSymAssetAmount, maxSymRuneAmount } = getMaxSymAmounts({\n    runeAmount: maxRuneBalance,\n    assetAmount: maxPoolAssetBalance,\n    pool,\n  })\n\n  const handleSelectLiquidityType = useCallback((type: LiquidityTypeOption) => {\n    if (type === LiquidityTypeOption.ASSET) {\n      setRuneAmount(Amount.fromAssetAmount(0, 8))\n    } else if (type === LiquidityTypeOption.RUNE) {\n      setAssetAmount(Amount.fromAssetAmount(0, 8))\n    }\n\n    setLiquidityType(type)\n    setPercent(0)\n  }, [])\n\n  const handleSelectPoolAsset = useCallback(\n    (poolAssetData: Asset) => {\n      history.push(getAddLiquidityRoute(poolAssetData))\n    },\n    [history],\n  )\n\n  const handleChangeAssetAmount = useCallback(\n    (amount: Amount) => {\n      const maxAmount = isSymDeposit ? maxSymAssetAmount : maxPoolAssetBalance\n\n      if (amount.gt(maxAmount)) {\n        setAssetAmount(maxAmount)\n        setPercent(100)\n\n        if (isSymDeposit) {\n          setRuneAmount(maxAmount.mul(pool.assetPriceInRune))\n        }\n      } else {\n        setAssetAmount(amount)\n        setPercent(amount.div(maxAmount).mul(100).assetAmount.toNumber())\n\n        if (isSymDeposit) {\n          setRuneAmount(amount.mul(pool.assetPriceInRune))\n        }\n      }\n    },\n    [maxSymAssetAmount, maxPoolAssetBalance, pool, isSymDeposit],\n  )\n\n  const handleChangePercent = useCallback(\n    (p: number) => {\n      setPercent(p)\n\n      if (expertMode === 'on') {\n        if (liquidityType !== LiquidityTypeOption.RUNE) {\n          setAssetAmount(maxPoolAssetBalance.mul(p).div(100))\n        }\n        if (liquidityType !== LiquidityTypeOption.ASSET) {\n          setRuneAmount(maxRuneBalance.mul(p).div(100))\n        }\n      } else if (isSymDeposit) {\n        setAssetAmount(maxSymAssetAmount.mul(p).div(100))\n        setRuneAmount(maxSymRuneAmount.mul(p).div(100))\n      } else if (liquidityType === LiquidityTypeOption.ASSET) {\n        setAssetAmount(maxPoolAssetBalance.mul(p).div(100))\n      } else if (liquidityType === LiquidityTypeOption.RUNE) {\n        setRuneAmount(maxRuneBalance.mul(p).div(100))\n      }\n    },\n    [\n      expertMode,\n      maxRuneBalance,\n      maxSymAssetAmount,\n      maxSymRuneAmount,\n      maxPoolAssetBalance,\n      isSymDeposit,\n      liquidityType,\n    ],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    handleChangePercent(100)\n  }, [handleChangePercent])\n\n  const handleChangeRuneAmount = useCallback(\n    (amount: Amount) => {\n      const maxAmount = isSymDeposit ? maxSymRuneAmount : maxRuneBalance\n      if (amount.gt(maxAmount)) {\n        setRuneAmount(maxAmount)\n\n        if (isSymDeposit) {\n          setAssetAmount(maxAmount.mul(pool.runePriceInAsset))\n        }\n      } else {\n        setRuneAmount(amount)\n        setPercent(amount.div(maxAmount).mul(100).assetAmount.toNumber())\n\n        if (isSymDeposit) {\n          setAssetAmount(amount.mul(pool.runePriceInAsset))\n        }\n      }\n    },\n    [maxSymRuneAmount, maxRuneBalance, pool, isSymDeposit],\n  )\n\n  const handleConfirmAdd = useCallback(async () => {\n    setVisibleConfirmModal(false)\n    if (wallet) {\n      const runeAssetAmount =\n        liquidityType !== LiquidityTypeOption.ASSET\n          ? new AssetAmount(Asset.RUNE(), runeAmount)\n          : undefined\n      const poolAssetAmount =\n        liquidityType !== LiquidityTypeOption.RUNE\n          ? new AssetAmount(poolAsset, assetAmount)\n          : undefined\n\n      const inAssets = []\n      if (liquidityType !== LiquidityTypeOption.ASSET) {\n        inAssets.push({\n          asset: Asset.RUNE().toString(),\n          amount: runeAmount.toSignificant(6),\n        })\n      }\n\n      if (liquidityType !== LiquidityTypeOption.RUNE) {\n        inAssets.push({\n          asset: poolAsset.toString(),\n          amount: assetAmount.toSignificant(6),\n        })\n      }\n\n      // register to tx tracker\n      const trackId = submitTransaction({\n        type: TxTrackerType.AddLiquidity,\n        submitTx: {\n          inAssets,\n          outAssets: [],\n          poolAsset: poolAsset.ticker,\n        },\n      })\n\n      try {\n        const txRes = await multichain.addLiquidity({\n          pool,\n          runeAmount: runeAssetAmount,\n          assetAmount: poolAssetAmount,\n        })\n\n        const runeTxHash = txRes?.runeTx\n        const assetTxHash = txRes?.assetTx\n\n        if (runeTxHash || assetTxHash) {\n          // start polling\n          pollTransaction({\n            type: TxTrackerType.AddLiquidity,\n            uuid: trackId,\n            submitTx: {\n              inAssets,\n              outAssets: [],\n              txID: runeTxHash || assetTxHash,\n              addTx: {\n                runeTxID: runeTxHash,\n                assetTxID: assetTxHash,\n              },\n              poolAsset: poolAsset.ticker,\n            },\n          })\n        }\n      } catch (error) {\n        setTxFailed(trackId)\n\n        Notification({\n          type: 'error',\n          message: 'Submit Transaction Failed.',\n          description: error?.toString(),\n          duration: 20,\n        })\n        console.log(error)\n      }\n    }\n  }, [\n    wallet,\n    pool,\n    poolAsset,\n    runeAmount,\n    assetAmount,\n    liquidityType,\n    submitTransaction,\n    pollTransaction,\n    setTxFailed,\n  ])\n\n  const handleCancel = useCallback(() => {\n    setVisibleConfirmModal(false)\n  }, [])\n\n  const handleConfirmApprove = useCallback(async () => {\n    setVisibleApproveModal(false)\n\n    if (wallet) {\n      const txHash = await multichain.approveAsset(poolAsset)\n\n      if (txHash) {\n        console.log('txhash', txHash)\n        const txURL = multichain.getExplorerTxUrl(poolAsset.chain, txHash)\n\n        Notification({\n          type: 'open',\n          message: 'View Approve Tx.',\n          description: 'Transaction submitted successfully!',\n          btn: (\n            <a href={txURL} target=\"_blank\" rel=\"noopener noreferrer\">\n              View Transaction\n            </a>\n          ),\n          duration: 20,\n        })\n      }\n    }\n  }, [poolAsset, wallet])\n\n  const handleAddLiquidity = useCallback(() => {\n    if (!wallet) {\n      Notification({\n        type: 'info',\n        message: 'Wallet Not Found',\n        description: 'Please connect wallet',\n      })\n      return\n    }\n\n    if (isFundsCapReached) {\n      Notification({\n        type: 'info',\n        message: 'Funds Cap Reached',\n        description: 'But we will try 322.',\n      })\n    }\n\n    setVisibleConfirmModal(true)\n  }, [wallet, isFundsCapReached])\n\n  const handleApprove = useCallback(() => {\n    if (wallet) {\n      setVisibleApproveModal(true)\n    } else {\n      Notification({\n        type: 'info',\n        message: 'Wallet Not Found',\n        description: 'Please connect wallet',\n      })\n    }\n  }, [wallet])\n\n  const totalFeeInUSD = useMemo(() => {\n    if (liquidityType === LiquidityTypeOption.SYMMETRICAL) {\n      const totalFee = getSumAmountInUSD(inboundRuneFee, inboundAssetFee, pools)\n      return `$${totalFee}`\n    }\n\n    if (liquidityType === LiquidityTypeOption.ASSET) {\n      return inboundAssetFee.totalPriceIn(Asset.USD(), pools).toCurrencyFormat()\n    }\n\n    // Rune asym\n    return inboundRuneFee.totalPriceIn(Asset.USD(), pools).toCurrencyFormat()\n  }, [liquidityType, inboundRuneFee, inboundAssetFee, pools])\n\n  const depositAssets: Asset[] = useMemo(() => {\n    if (liquidityType === LiquidityTypeOption.RUNE) {\n      return [Asset.RUNE()]\n    }\n\n    if (liquidityType === LiquidityTypeOption.ASSET) {\n      return [poolAsset]\n    }\n\n    return [poolAsset, Asset.RUNE()]\n  }, [liquidityType, poolAsset])\n\n  const renderFee = useMemo(() => {\n    const hasRuneFee = liquidityType !== LiquidityTypeOption.ASSET\n    const hasAssetFee = liquidityType !== LiquidityTypeOption.RUNE\n\n    return (\n      <>\n        {hasRuneFee && (\n          <Information\n            title=\"RUNE Fee\"\n            description={inboundRuneFee.toCurrencyFormat()}\n            tooltip=\"Gas fee used for submitting RUNE transaction\"\n          />\n        )}\n        {hasAssetFee && (\n          <Information\n            title={`${poolAsset.ticker} Fee`}\n            description={inboundAssetFee.toCurrencyFormat()}\n            tooltip={`Gas fee used for submitting ${poolAsset.ticker} transaction`}\n          />\n        )}\n        <Information\n          title=\"Total Fee\"\n          description={totalFeeInUSD}\n          tooltip={TX_FEE_TOOLTIP_LABEL}\n        />\n      </>\n    )\n  }, [liquidityType, inboundAssetFee, inboundRuneFee, poolAsset, totalFeeInUSD])\n\n  const renderConfirmModalContent = useMemo(() => {\n    const title =\n      liquidityType === LiquidityTypeOption.SYMMETRICAL\n        ? `${assetAmount.toSignificant(\n            6,\n          )} ${poolAsset.ticker.toUpperCase()}, ${runeAmount.toSignificant(\n            6,\n          )} RUNE`\n        : liquidityType === LiquidityTypeOption.RUNE\n        ? `${runeAmount.toSignificant(6)} RUNE`\n        : `${assetAmount.toSignificant(6)} ${poolAsset.ticker.toUpperCase()}`\n\n    const estimatedTime =\n      liquidityType === LiquidityTypeOption.RUNE\n        ? getEstimatedTxTime({\n            chain: THORChain,\n            amount: runeAmount,\n          })\n        : getEstimatedTxTime({\n            chain: poolAsset.chain as SupportedChain,\n            amount: assetAmount,\n          })\n\n    return (\n      <Styled.ConfirmModalContent>\n        <Information title=\"Add\" description={title} />\n        <br />\n        <Information\n          title=\"Slip\"\n          description={addLiquiditySlip}\n          tooltip={SLIP_TOOLTIP_LABEL}\n        />\n        <Information\n          title=\"Pool Share Estimated\"\n          description={poolShareEst}\n          tooltip={ESTIMATED_POOL_SHARE_LABEL}\n        />\n        {renderFee}\n        <Information\n          title=\"Estimated Time\"\n          description={estimatedTime}\n          tooltip={ESTIMATED_TIME_LABEL}\n        />\n      </Styled.ConfirmModalContent>\n    )\n  }, [\n    assetAmount,\n    runeAmount,\n    poolAsset,\n    addLiquiditySlip,\n    poolShareEst,\n    liquidityType,\n    renderFee,\n  ])\n\n  const renderApproveModal = useMemo(() => {\n    const usdFee = inboundAssetFee.totalPriceIn(Asset.USD(), pools)\n\n    return (\n      <Styled.ConfirmModalContent>\n        <Information\n          title=\"Approve Transaction\"\n          description={`${poolAsset.ticker.toUpperCase()}`}\n        />\n        <Information\n          title={`${poolAsset} Fee`}\n          description={`${inboundAssetFee.toCurrencyFormat()} (${usdFee.toCurrencyFormat()})`}\n          tooltip={`Gas fee used for submitting ${poolAsset} transaction`}\n        />\n      </Styled.ConfirmModalContent>\n    )\n  }, [poolAsset, inboundAssetFee, pools])\n\n  const minRuneAmount: Amount = useMemo(\n    () => AssetAmount.getMinAmountByChain('THOR').amount,\n    [],\n  )\n  const minAssetAmount: Amount = useMemo(() => {\n    if (poolAsset.isGasAsset()) {\n      return AssetAmount.getMinAmountByChain(poolAsset.chain)\n    }\n\n    return Amount.fromAssetAmount(0, 8)\n  }, [poolAsset])\n\n  const isValidDeposit: {\n    valid: boolean\n    msg?: string\n  } = useMemo(() => {\n    if (liquidityType === LiquidityTypeOption.SYMMETRICAL) {\n      if (!runeAmount.gt(minRuneAmount) || !assetAmount.gt(minAssetAmount)) {\n        return {\n          valid: false,\n          msg: 'Insufficient Amount',\n        }\n      }\n    }\n\n    if (liquidityType === LiquidityTypeOption.ASSET) {\n      if (!assetAmount.gt(minAssetAmount)) {\n        return {\n          valid: false,\n          msg: 'Insufficient Amount',\n        }\n      }\n    }\n\n    if (liquidityType === LiquidityTypeOption.RUNE) {\n      if (!runeAmount.gt(minRuneAmount)) {\n        return {\n          valid: false,\n          msg: 'Insufficient Amount',\n        }\n      }\n    }\n\n    return { valid: true }\n  }, [liquidityType, runeAmount, assetAmount, minRuneAmount, minAssetAmount])\n\n  const isApproveRequired = useMemo(() => {\n    if (\n      liquidityType !== LiquidityTypeOption.RUNE &&\n      isApproved !== null &&\n      !isApproved\n    ) {\n      return true\n    }\n\n    return false\n  }, [isApproved, liquidityType])\n\n  const title = useMemo(() => `Add ${poolAsset.ticker} Liquidity`, [poolAsset])\n\n  return (\n    <PanelView meta={title} poolAsset={poolAsset} type=\"add\">\n      <LiquidityType\n        poolAsset={poolAsset}\n        selected={liquidityType}\n        onSelect={handleSelectLiquidityType}\n        isAsymAvailable={pool.detail.status === 'available'}\n      />\n      <AssetInputCard\n        title=\"Add\"\n        asset={poolAsset}\n        assets={inputAssets}\n        amount={assetAmount}\n        balance={poolAssetBalance}\n        onChange={handleChangeAssetAmount}\n        onSelect={handleSelectPoolAsset}\n        onMax={\n          liquidityType !== LiquidityTypeOption.RUNE\n            ? handleSelectMax\n            : undefined\n        }\n        usdPrice={poolAssetPriceInUSD}\n        wallet={wallet || undefined}\n        inputProps={{ disabled: liquidityType === LiquidityTypeOption.RUNE }}\n      />\n      <Styled.ToolContainer>\n        <Styled.SliderWrapper>\n          <Slider value={percent} onChange={handleChangePercent} withLabel />\n        </Styled.SliderWrapper>\n        <Styled.SwitchPair>\n          <PlusOutlined />\n        </Styled.SwitchPair>\n      </Styled.ToolContainer>\n      <AssetInputCard\n        title=\"Add\"\n        asset={Asset.RUNE()}\n        amount={runeAmount}\n        usdPrice={runeAssetPriceInUSD}\n        selectDisabled={false}\n        balance={runeBalance}\n        onChange={handleChangeRuneAmount}\n        onMax={\n          liquidityType !== LiquidityTypeOption.ASSET\n            ? handleSelectMax\n            : undefined\n        }\n        wallet={wallet || undefined}\n        inputProps={{ disabled: liquidityType === LiquidityTypeOption.ASSET }}\n      />\n\n      <Styled.DetailContent>\n        <Information\n          title=\"Slip\"\n          description={addLiquiditySlip}\n          tooltip={SLIP_TOOLTIP_LABEL}\n        />\n        <Information\n          title=\"Pool Share Estimated\"\n          description={poolShareEst}\n          tooltip={ESTIMATED_POOL_SHARE_LABEL}\n        />\n        {renderFee}\n      </Styled.DetailContent>\n\n      {isApproved !== null && wallet && (\n        <Styled.ConfirmButtonContainer>\n          {isApproveRequired && (\n            <Styled.ApproveBtn onClick={handleApprove}>\n              Approve\n            </Styled.ApproveBtn>\n          )}\n          <FancyButton\n            disabled={isApproveRequired}\n            onClick={handleAddLiquidity}\n            error={!isValidDeposit.valid}\n          >\n            {isValidDeposit.valid ? 'Add Liquidity' : isValidDeposit.msg}\n          </FancyButton>\n        </Styled.ConfirmButtonContainer>\n      )}\n      {!wallet && (\n        <Styled.ConfirmButtonContainer>\n          <FancyButton\n            onClick={handleAddLiquidity}\n            error={!isValidDeposit.valid}\n          >\n            {isValidDeposit.valid ? 'Add Liquidity' : isValidDeposit.msg}\n          </FancyButton>\n        </Styled.ConfirmButtonContainer>\n      )}\n\n      <ConfirmModal\n        visible={visibleConfirmModal}\n        onOk={handleConfirmAdd}\n        onCancel={handleCancel}\n        inputAssets={depositAssets}\n      >\n        {renderConfirmModalContent}\n      </ConfirmModal>\n      <ConfirmModal\n        visible={visibleApproveModal}\n        onOk={handleConfirmApprove}\n        onCancel={() => setVisibleApproveModal(false)}\n        inputAssets={[poolAsset]}\n      >\n        {renderApproveModal}\n      </ConfirmModal>\n    </PanelView>\n  )\n}\n\nexport default AddLiquidityView\n","import { Amount, Pool } from 'multichain-sdk'\n\nexport const getMaxSymAmounts = ({\n  assetAmount,\n  runeAmount,\n  pool,\n}: {\n  assetAmount: Amount\n  runeAmount: Amount\n  pool: Pool\n}) => {\n  const symAssetAmount = runeAmount.mul(pool.runePriceInAsset)\n\n  if (symAssetAmount.gt(assetAmount)) {\n    const maxSymAssetAmount = assetAmount\n    const maxSymRuneAmount = maxSymAssetAmount.mul(pool.assetPriceInRune)\n\n    return {\n      maxSymAssetAmount,\n      maxSymRuneAmount,\n    }\n  }\n  const maxSymAssetAmount = symAssetAmount\n  const maxSymRuneAmount = runeAmount\n\n  return {\n    maxSymAssetAmount,\n    maxSymRuneAmount,\n  }\n}\n","import Add from './Add'\n\nexport default Add\n"],"sourceRoot":""}